<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flask | Remotely Curious</title>
    <link>https://www.remotelycurious.net/tag/flask/</link>
      <atom:link href="https://www.remotelycurious.net/tag/flask/index.xml" rel="self" type="application/rss+xml" />
    <description>flask</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 25 Apr 2021 20:01:13 -0400</lastBuildDate>
    <image>
      <url>https://www.remotelycurious.net/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>flask</title>
      <link>https://www.remotelycurious.net/tag/flask/</link>
    </image>
    
    <item>
      <title>issues.app (5): Database design</title>
      <link>https://www.remotelycurious.net/post/issues-app-05-db/</link>
      <pubDate>Sun, 25 Apr 2021 20:01:13 -0400</pubDate>
      <guid>https://www.remotelycurious.net/post/issues-app-05-db/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This writeup is a result of my efforts to learn web app development with Flask. It builds on the codebase from the previous writeup, which you can find &lt;a href=&#34;https://www.remotelycurious.net/post/issues-app-04-auth/&#34;&gt;here&lt;/a&gt;. Any code documented here may change significantly in the future. &lt;strong&gt;Be warned!&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Most useful applications need to manage data. Generally, the more complex the application, the harder it becomes to efficiently organize this data. As it turns out, there is a lot to think about when it comes to managing the kind of data you might find in an issue tracker. This writeup describes the initial database schemata that will support &lt;code&gt;issues.app&lt;/code&gt;, including the thought processes that led to several important design decisions.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#the-database-schema&#34;&gt;The database schema&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#messages-and-comments&#34;&gt;Messages and comments&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#status-codes&#34;&gt;Status codes&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#roles-and-permissions&#34;&gt;Roles and permissions&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#addendum&#34;&gt;Addendum&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;the-database-schema&#34;&gt;The database schema&lt;/h1&gt;
&lt;p&gt;The easiest way to start the design process (at least for me) is to define the conceptual things that the application will need to manage. If we&amp;rsquo;re talking about an issue tracker, I say we will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;issues&lt;/em&gt;, no surprises there,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;projects&lt;/em&gt;, to organize issues into different areas of work,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;users&lt;/em&gt;, to work on the issues,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;user roles&lt;/em&gt;, to specify which operations (e.g., updating an issue, archiving a project) can be performed by each user,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;comments&lt;/em&gt; and &lt;em&gt;messages&lt;/em&gt;, to allow public and private communication within the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these things gets a table in the database. All tables have an ID column, which serves as the primary key for each table. As described in the previous writeup, each table will be implemented as a Python class that inherits from SQLAlchemy&amp;rsquo;s Model class. The relationship between different tables is shown in the diagram below.&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-1b-initial-database-schematic-for-issuesapp-pk-primary-key-fk-foreign-key&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-05-db/issues-schema.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 1.&amp;lt;/b&amp;gt; Initial database schematic for issues.app. PK: primary key, FK: foreign key.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-05-db/issues-schema.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 1.&lt;/b&gt; Initial database schematic for issues.app. PK: primary key, FK: foreign key.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This schema will almost certainly change. It&amp;rsquo;s probably a good idea, for example, to track issue/project changes, such as when an issue gets assigned to a user, or when the user accepts the assignment. This might be implemented with an &lt;em&gt;Activity&lt;/em&gt; table that keeps track of the affected entity (issue, project, etc.) and the details of the change (e.g., issue status: ASSIGNED → ACCEPTED).
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s talk more about some of the features of this design.&lt;/p&gt;
&lt;h2 id=&#34;messages-and-comments&#34;&gt;Messages and comments&lt;/h2&gt;
&lt;p&gt;There are two kinds of communication available in the app: (1) private messaging, in which a comment is sent by one person to another, and (2) public comments, which are posted on an issue or project. Since comments can be associated with more than one conceptual object (or what I&amp;rsquo;m calling an &lt;em&gt;entity&lt;/em&gt;), the Comment table is a bit more complex than the Message table.&lt;/p&gt;
&lt;p&gt;For that reason, the Comment table keeps track of two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;entity ID&lt;/em&gt;, holding the unique identification number of the entity,&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;entity code&lt;/em&gt;, which identifies what kind of entity is being commented on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The entity codes are stored in the Python dictionary subclass shown below. The &lt;code&gt;name()&lt;/code&gt; method allows an instance of the class to perform code-to-name lookups.&lt;/p&gt;
&lt;h4 id=&#34;srcmodelspy--entity&#34;&gt;src/models.py &amp;raquo; Entity&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Entity(dict):
    def __init__(self):
        self[&#39;ISSUE&#39;] = 1
        self[&#39;PROJECT&#39;] = 2
        self[&#39;FORUM&#39;] = 3

    def __getattr__(self, attr):
        return self.get(attr)

    def name(self, code):
        for key, val in self.items():
            if val == code:
                return key
        # complain if code is absent
        raise KeyError(&#39;input is not a valid entity code&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;status-codes&#34;&gt;Status codes&lt;/h2&gt;
&lt;p&gt;The status of an issue will be stored as an integer (&lt;code&gt;Issue.status_code&lt;/code&gt;), which can take one of several values. In the end I settled on the states shown in the flowchart below (Fig. 2), with arrows indicating the possible transitions between states.&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-2b-issue-status-flowchart&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-05-db/status-flowchart.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 2.&amp;lt;/b&amp;gt; Issue status flowchart.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-05-db/status-flowchart.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 2.&lt;/b&gt; Issue status flowchart.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The usual setting I have in mind for this app involves &lt;em&gt;employees&lt;/em&gt; who work on issues, &lt;em&gt;reviewers&lt;/em&gt;, who check the employees&amp;rsquo; work, and &lt;em&gt;managers&lt;/em&gt;, who have the final say. In a hypothetical situation, their interactions with the application might look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A new issue is created on behalf of a client.&lt;/li&gt;
&lt;li&gt;The manager assigns the issue to the employee (NEW → ASSIGNED).&lt;/li&gt;
&lt;li&gt;The employee accepts the assignment (ASSIGNED → ACCEPTED).&lt;/li&gt;
&lt;li&gt;After completing work to resolve the issue, the employee indicates that the issue is ready for some QA (ACCEPTED → REVIEW).&lt;/li&gt;
&lt;li&gt;The reviewer realizes that an issue is up for review, goes over the work of the employee, and decides that the issue has been resolved (REVIEW → RESOLVED).&lt;/li&gt;
&lt;li&gt;Noticing that an issue has been resolved, the manager verifies that the work has indeed solved the problem and archives the issue (RESOLVED → ARCHIVED).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A Python dictionary subclass will be used to hold the status data and perform code-to-name lookups. Four of these status values (NEW, ACTIVE, INACTIVE, ARCHIVED) will likely be used for projects, using &lt;code&gt;Project.status_code&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;srcmodelspy--status&#34;&gt;src/models.py &amp;raquo; Status&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Status(dict):
    def __init__(self):
        self[&#39;NEW&#39;] = 1
        self[&#39;ASSIGNED&#39;] = 2
        self[&#39;ACCEPTED&#39;] = 3
        self[&#39;REVIEW&#39;] = 4
        self[&#39;RESOLVED&#39;] = 5
        self[&#39;DISMISSED&#39;] = 6
        self[&#39;ACTIVE&#39;] = 7
        self[&#39;INACTIVE&#39;] = 8
        self[&#39;ARCHIVED&#39;] = 9

    def __getattr__(self, attr):
        return self.get(attr)

    def name(self, code):
        for key, val in self.items():
            if val == code:
                return key
        # complain if code is absent
        raise KeyError(&#39;input is not a valid status code&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;roles-and-permissions&#34;&gt;Roles and permissions&lt;/h2&gt;
&lt;p&gt;A user will be able to perform different operations in the application, depending on what role they have in the company. Managers, for example, will generally have more permissions than regular employees, who in turn will have more permissions than associates (non-employees or temporary workers). The table below shows what this privilege hierarchy looks like.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;clients&lt;/th&gt;
&lt;th&gt;associates&lt;/th&gt;
&lt;th&gt;employees&lt;/th&gt;
&lt;th&gt;reviewers&lt;/th&gt;
&lt;th&gt;managers&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;💬 message users&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✍️ create comments&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🎫 create issues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;📋 review issues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;📁 create projects&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🗃️ resolve and archive&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Depending on what role each user plays in the company, they will be able to perform different operations. The different permissions are stored in the dictionary subclass shown below.&lt;/p&gt;
&lt;h4 id=&#34;srcmodelspy--permission&#34;&gt;src/models.py &amp;raquo; Permission&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Permission(dict):
    def __init__(self):
        self[&#39;NOTHING&#39;] = 0
        self[&#39;MESSAGE_USERS&#39;] = 1
        self[&#39;CREATE_COMMENTS&#39;] = 2
        self[&#39;CREATE_ISSUES&#39;] = 4
        self[&#39;CREATE_PROJECTS&#39;] = 8
        self[&#39;RESOLVE_ISSUES&#39;] = 16
        self[&#39;ARCHIVE_PROJECTS&#39;] = 32
        self[&#39;EVERYTHING&#39;] = 64

    def __getattr__(self, attr):
        return self.get(attr)

    def name(self, code):
        for key, val in self.items():
            if val == code:
                return key
        # complain if code is absent
        raise KeyError(&#39;input is not a valid permission code&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the numeric values of these permissions are powers of two, which allows for permissions to be combined and easily decoded by the webapp. That means we can, for instance, define the role of an employee by the sum of three privileges:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r = Role(name=&#39;employee&#39;, permissions=p.MESSAGE_USERS + p.CREATE_COMMENTS + p.CREATE_ISSUES)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Note to self: consider adding a &lt;em&gt;revoked permissions&lt;/em&gt; column to the User table, such that the user&amp;rsquo;s effective permissions are (a) their role&amp;rsquo;s permissions, minus (b) their revoked permissions. If an associate is spamming users with messages, an admin could set their revoked permissions field to &lt;code&gt;MESSAGE_USERS&lt;/code&gt;, making their effective privileges equal to &lt;code&gt;CREATE_COMMENTS&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;addendum&#34;&gt;Addendum&lt;/h1&gt;
&lt;p&gt;As it turns out, there&amp;rsquo;s a much better data structure that can be used instead of these custom dictionary subclasses I cooked up. Ladies and gentlemen, let me present: the humble 
&lt;a href=&#34;https://docs.python.org/3/library/enum.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;enum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By subclassing an enum, we not only gain access to some handy features, but we also get away with using far less code. For example, let&amp;rsquo;s rewrite the Permission class like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Permission(IntEnum):
    NOTHING = 0
    MESSAGE_USERS = 1
    CREATE_COMMENTS = 2
    CREATE_ISSUES = 4
    CREATE_PROJECTS = 8
    RESOLVE_ISSUES = 16
    ARCHIVE_PROJECTS = 32
    EVERYTHING = 64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a quick demonstration of what this class can do for us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Permission.CREATE_ISSUES&lt;/code&gt; → &lt;code&gt;&amp;lt;Permission.CREATE_ISSUES: 4&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permission.CREATE_ISSUES.name&lt;/code&gt; → &lt;code&gt;CREATE_ISSUES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permission.CREATE_ISSUES.value&lt;/code&gt; → &lt;code&gt;4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permission(4)&lt;/code&gt; → &lt;code&gt;&amp;lt;Permission.CREATE_ISSUES: 4&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permission(5)&lt;/code&gt; → &lt;code&gt;ValueError: 5 is not a valid Permission&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permission.CREATE_ERROR&lt;/code&gt; → &lt;code&gt;AttributeError: CREATE_ERROR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Safety and convenience, all in one package. Beautiful, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;This is a first attempt to define the logical organization of data in the issue tracker. Definitely a work in progress, but it should be enough to get the app off the ground and moving towards a working prototype.&lt;/p&gt;
&lt;p&gt;Looks like I can&amp;rsquo;t put off working on the user interface for much longer!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>issues.app (4): Authentication</title>
      <link>https://www.remotelycurious.net/post/issues-app-04-auth/</link>
      <pubDate>Sat, 06 Mar 2021 22:07:07 -0500</pubDate>
      <guid>https://www.remotelycurious.net/post/issues-app-04-auth/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This writeup is a result of my efforts to learn web app development with Flask. It builds on the codebase from the previous writeup, which you can find &lt;a href=&#34;https://www.remotelycurious.net/post/issues-app-03-blueprints/&#34;&gt;here&lt;/a&gt;. Any code documented here may change significantly in the future. &lt;strong&gt;Be warned!&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As of the last codebase revision, we have ourselves the skeleton of (what will hopefully become) a fully-fledged web application. This writeup will document the creation of an &lt;em&gt;authentication&lt;/em&gt; system that lets users use the application in certain ways, depending on whether the system can confirm their identity (e.g., with a username/password). The system is comprised of (a) a database (SQLite) that holds user credentials, and (b) user sessions in the browser to keep track of authenticated state.&lt;/p&gt;
&lt;p&gt;Note that my approach mirrors that of Miguel Grinberg&amp;rsquo;s in his 
&lt;a href=&#34;https://www.amazon.com/Flask-Web-Development-Developing-Applications/dp/1491991739&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flask Web Development&lt;/a&gt; book. While there are a few moving parts to this solution, the Python packages involved are easy to use and work well together. Perfect for a webapp novice like myself.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#installing-a-database-framework&#34;&gt;Installing a database framework&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#configuring-sqlalchemy&#34;&gt;Configuring SQLAlchemy&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#defining-database-models&#34;&gt;Defining database models&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#creating-the-database&#34;&gt;Creating the database&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-password-hashes&#34;&gt;Implementing password hashes&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#testing-the-database&#34;&gt;Testing the database&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#implementing-user-authentication&#34;&gt;Implementing user authentication&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#login-form&#34;&gt;Login form&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#user-session-management&#34;&gt;User session management&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#view-functions&#34;&gt;View functions&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#grover-signs-in&#34;&gt;Grover signs in&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;installing-a-database-framework&#34;&gt;Installing a database framework&lt;/h1&gt;
&lt;p&gt;To implement the database, we will be using 
&lt;a href=&#34;https://www.sqlalchemy.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQLAlchemy&lt;/a&gt;. There are 
&lt;a href=&#34;https://www.sqlalchemy.org/features.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;many advantages&lt;/a&gt; to using this high-level framework but perhaps the biggest one is that it allows for the definition of the database schema through Python classes. This is really convenient, as you will see later. SQLAlchemy gives us the choice of most popular database engines. For the sake of simplicity, I will run with SQLite.&lt;/p&gt;
&lt;p&gt;As with many nice things, SQLAlchemy has a matching Flask extension: Flask-SQLAlchemy. This is installed in the usual way:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install flask-sqlalchemy&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;configuring-sqlalchemy&#34;&gt;Configuring SQLAlchemy&lt;/h2&gt;
&lt;p&gt;Flask-SQLAlchemy picks up its 
&lt;a href=&#34;https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;configuration&lt;/a&gt; from the Flask application instance. As was done for the Bootstrap object, we need to create the database object and bind it to the app instance with the &lt;code&gt;init_app()&lt;/code&gt; method.&lt;/p&gt;
&lt;h4 id=&#34;src__init__py&#34;&gt;src/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
from flask_sqlalchemy import SQLAlchemy

bootstrap = Bootstrap()
db = SQLAlchemy()

def create_app(config_name):
    app = Flask(__name__, template_folder=&#39;./templates&#39;, static_folder=&#39;./static&#39;)
    app.config.from_object(config[config_name])

    bootstrap.init_app(app)
    db.init_app(app)
    ...
    return app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will configure Flask-SQLAlchemy. The most important parameter is &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt;, which takes as its value the URL of the database file. It&amp;rsquo;s good practice to work on a separate database for each configuration &amp;ndash; an accidental modification of the production database could be painful.&lt;/p&gt;
&lt;p&gt;On Windows, an SQLite URL take the form &lt;code&gt;sqlite:///&amp;lt;DATABASE-PATH&amp;gt;&lt;/code&gt;, like &lt;code&gt;sqlite:///c:/issues.app/data.sqlite&lt;/code&gt;. For testing instances, setting the URL to &lt;code&gt;sqlite://&lt;/code&gt; tells SQLAlchemy to create the database in memory, essentially as a throwaway database.&lt;/p&gt;
&lt;h4 id=&#34;configpy&#34;&gt;config.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get(&#39;SECRET_KEY&#39;) # needed for tamper-proof session cookies
    SQLALCHEMY_TRACK_MODIFICATIONS = False # disable event system and conserve memory

class DevelopmentConfig(Config):
    # enables interactive debugger on the development server
    # also useful for monitoring code changes
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = &#39;sqlite:///&#39; + os.path.join(basedir, &#39;data-dev.sqlite&#39;)

class TestingConfig(Config):
    TESTING = True # disables error catching during request handling
    SQLALCHEMY_DATABASE_URI = &#39;sqlite://&#39; # test data stored in memory

class ProductionConfig(Config):
    SQLALCHEMY_DATABASE_URI = &#39;sqlite:///&#39; + os.path.join(basedir, &#39;data.sqlite&#39;)

config = {
    &#39;development&#39;: DevelopmentConfig,
    &#39;testing&#39;: TestingConfig,
    &#39;production&#39;: ProductionConfig,
    &#39;default&#39;: DevelopmentConfig
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also set &lt;code&gt;SQLALCHEMY_TRACK_MODIFICATIONS = False&lt;/code&gt; to conserve system resources as suggested in Flask-SQLAlchemy&amp;rsquo;s documentation. Note that once we start testing the database, Pytest will complain if this parameter has not been specified.&lt;/p&gt;
&lt;h2 id=&#34;defining-database-models&#34;&gt;Defining database models&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re used to working with relational databases the old fashioned way, using a framework like SQLAlchemy will feel very different. For example, instead of using DDL queries like &lt;code&gt;CREATE&lt;/code&gt; and &lt;code&gt;ALTER&lt;/code&gt; to build a table, we need to write a special kind of Python class that inherits from SQLAlchemy&amp;rsquo;s &lt;code&gt;Model&lt;/code&gt; base class and whose attributes define the table columns.&lt;/p&gt;
&lt;p&gt;We are going to kick things off with a single table. The &lt;code&gt;User&lt;/code&gt; 
&lt;a href=&#34;https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;model&lt;/a&gt; below defines a table with four columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; (integer), a unique identifying number for each user,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;email&lt;/code&gt; (string, max length 64), the user&amp;rsquo;s email&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; (string, max length 32), as it sounds, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_hash&lt;/code&gt; (string), an encoded version of the user&amp;rsquo;s password (described later).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;srcmodelspy&#34;&gt;src/models.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from . import db

class User(db.Model):
    __tablename__ = &#39;users&#39;
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(64), unique=True, index=True, nullable=False)
    username = db.Column(db.String(32), unique=True, index=True, nullable=False)
    password_hash = db.Column(db.String(128))

    def __repr__(self):
        return f&#39;&amp;lt;User {self.username}&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setting &lt;code&gt;index=True&lt;/code&gt; tells SQLAlchemy to build an index for the column, which makes queries more efficient. We also don&amp;rsquo;t want to allow null values for the id, email and username columns (this is automatic for primary keys).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    For now, I&amp;rsquo;ll let the the password hash column take null values &amp;mdash; maybe null could be used to indicate that a user has been banned from the application.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;creating-the-database&#34;&gt;Creating the database&lt;/h2&gt;
&lt;p&gt;With the model defined, our next task is to create the database. Running &lt;code&gt;flask shell&lt;/code&gt; will start 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/cli/#open-a-shell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an interactive Python shell&lt;/a&gt; in the context of the application. The first order of business is to import the SQLAlchemy instance and run &lt;code&gt;db.create_all()&lt;/code&gt;, which creates the database and any tables that are defined by the model files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ROOTDIR&amp;gt; flask shell
&amp;gt;&amp;gt;&amp;gt; from src import db
&amp;gt;&amp;gt;&amp;gt; db.create_all()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the default development configuration in effect, this will create a &lt;code&gt;data-dev.sqlite&lt;/code&gt; file in the base directory.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a couple of users and inspect their properties.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from src.models import User
&amp;gt;&amp;gt;&amp;gt; u1 = User(email=&#39;bert@gmail.com&#39;, username=&#39;bert&#39;)
&amp;gt;&amp;gt;&amp;gt; u2 = User(email=&#39;ernie@yahoo.com&#39;, username=&#39;ernie&#39;)
&amp;gt;&amp;gt;&amp;gt; print(u1)
&amp;lt;User bert&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(u1.id)
None
&amp;gt;&amp;gt;&amp;gt; print(u1.email)
bert@gmail.com
&amp;gt;&amp;gt;&amp;gt; print(u2)
&amp;lt;User ernie&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(u2.id)
None
&amp;gt;&amp;gt;&amp;gt; print(u2.email)
ernie@yahoo.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the output above, it looks as though the ID properties haven&amp;rsquo;t been set properly. This is because although we have made some Python objects, any primary key properties won&amp;rsquo;t take values until the objects have been written to the database. This is done by adding them to a &lt;em&gt;session&lt;/em&gt;, and then committing the session:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt; db.session.add(u1)
&amp;gt;&amp;gt;&amp;gt; db.session.add(u2)
&amp;gt;&amp;gt;&amp;gt; db.session.commit()
&amp;gt;&amp;gt;&amp;gt; print(u1.id)
1
&amp;gt;&amp;gt;&amp;gt; print(u2.id)
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A list of all users in the table can now be obtained by querying the user model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt; User.query.all()
[&amp;lt;User bert&amp;gt;, &amp;lt;User ernie&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;implementing-password-hashes&#34;&gt;Implementing password hashes&lt;/h2&gt;
&lt;p&gt;Storing cleartext passwords within a database is almost certainly a bad idea. If a hacker gains access to the database, the credentials of all users can be easily accessed and any sensitive information stored on the application server becomes fair game. It is important to store passwords securely to prevent or at least mitigate these kinds of risks.&lt;/p&gt;
&lt;p&gt;Instead of storing a raw password, the database can instead keep track of its corresponding &lt;em&gt;hash&lt;/em&gt;. This involves using a hash function to transform the password into a string of random-looking characters. For example, we can use a 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bcrypt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bcrypt&lt;/a&gt; hash function to convert the &lt;code&gt;meepmeep&lt;/code&gt; password into&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$2a$04$cT3a9teblhIemCmmXjXQleoxjovVhoRddfm9DR6tZWeuDRETIn5hK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which looks nothing like the original password. Hash functions also make use of a random component to &lt;em&gt;salt&lt;/em&gt; the hash, such that using the function twice on the same input results in completely different outputs. More importantly, hash functions are &amp;ldquo;one-way&amp;rdquo;, meaning that while computation of the hash is relatively fast, the inverse operation (i.e., recovering the password from the hash) is practically impossible.&lt;/p&gt;
&lt;p&gt;We can use the 
&lt;a href=&#34;https://werkzeug.palletsprojects.com/en/1.0.x/utils/#module-werkzeug.security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Werkzeug&lt;/a&gt; package to do the heavy lifting for us, using the &lt;code&gt;generate_password_hash()&lt;/code&gt; and &lt;code&gt;check_password_hash()&lt;/code&gt; functions to handle hash generation and verification. The idea here is to update the User model class such that a model instance (e.g., &lt;code&gt;u1&lt;/code&gt; in the example above) can be used to set a write-only &lt;code&gt;password&lt;/code&gt; attribute, which generates the &lt;code&gt;password_hash&lt;/code&gt; attribute when the password is written. The model also makes the &lt;code&gt;verify_password()&lt;/code&gt; method available to the application so that Werkzeug can compare the user&amp;rsquo;s password hash with that of the second input argument.&lt;/p&gt;
&lt;h4 id=&#34;srcmodelspy-1&#34;&gt;src/models.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from . import db
from werkzeug.security import generate_password_hash, check_password_hash

class User(db.Model):
    ...
    @property
    def password(self):
        raise AttributeError(&#39;password is not readable&#39;)

    @password.setter
    def password(self, password):
        self.password_hash = generate_password_hash(password)

    def verify_password(self, password):
        return check_password_hash(self.password_hash, password)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now create a new user entry to demonstrate how this works. Grover has the honor of being the first user to be assigned a password, so we&amp;rsquo;ll commit his credentials to the database and eventually use them to log into the system.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt; u = User(email=&#39;grover@hotmail.com&#39;, username=&#39;grover&#39;)
&amp;gt;&amp;gt;&amp;gt; print(u)
&amp;lt;User grover&amp;gt;
&amp;gt;&amp;gt;&amp;gt; u.password = &#39;imbluedabadeedabadaa&#39;
&amp;gt;&amp;gt;&amp;gt; print(u.password_hash)
pbkdf2:sha256:150000$KpvVu5xH$0fb90391c70c36c82d5e6760aa8925bbfaafb8f9f482b482ad8b34bd9f452c3
&amp;gt;&amp;gt;&amp;gt; print(u.password)
# raises AttributeError: password is not readable
&amp;gt;&amp;gt;&amp;gt; db.session.add(u)   
&amp;gt;&amp;gt;&amp;gt; db.session.commit()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing-the-database&#34;&gt;Testing the database&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a good idea to write some basic unit tests to make sure any future changes to our code don&amp;rsquo;t break this functionality. Below is a set of three tests that validate our expectations for how passwords should be accessed and validated.&lt;/p&gt;
&lt;h4 id=&#34;teststest_user_modelpy&#34;&gt;tests/test_user_model.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from src.models import User
import pytest

def test_password_setter():
    u = User(password=&#39;meep&#39;)
    assert u.password_hash is not None

def test_unreadable_password():
    u = User(password=&#39;meep&#39;)
    with pytest.raises(AttributeError):
        u.password

def test_password_verification():
    u = User(password=&#39;meep&#39;)
    assert u.verify_password(&#39;meep&#39;) == True
    assert u.verify_password(&#39;beep&#39;) == False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running pytest confirms that all is well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;==================================== test session starts ====================================
platform win32 -- Python 3.7.7, pytest-6.0.1, py-1.9.0, pluggy-0.13.1
rootdir: C:\Users\alexh\Workspace\python\issues
plugins: flask-1.0.0
collected 6 items

tests\test_suite.py ...                                                                [ 50%]
tests\test_user_model.py ...                                                           [100%]

===================================== 6 passed in 0.64s =====================================
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;implementing-user-authentication&#34;&gt;Implementing user authentication&lt;/h1&gt;
&lt;p&gt;Now that the database has some idea of who should be able to use the app (i.e., Grover), the next step is to implement user authentication. The general goal is to display different information to the user, depending on whether they have been authenticated. At minimum, we need a login page that accepts a username/password pair and communicates with the database to determine whether the credentials are valid.&lt;/p&gt;
&lt;p&gt;Just as we have a &lt;code&gt;main&lt;/code&gt; blueprint for organizing project-related view functions (project, issues, messages, etc.), we will also have an &lt;code&gt;auth&lt;/code&gt; blueprint. There will be two view functions in this blueprint: one to handle user login and the other user logout. We will also need a form to accept and submit user credentials. All of these will be placed in an &lt;code&gt;auth&lt;/code&gt; folder, which in turn sits inside the project source code directory.&lt;/p&gt;
&lt;h2 id=&#34;login-form&#34;&gt;Login form&lt;/h2&gt;
&lt;p&gt;To implement the login form, we will use the Flask-WTF extension. As was done for the user database model, the form is implemented as a Python class that inherits from &lt;code&gt;FlaskForm&lt;/code&gt;, a special base class. It&amp;rsquo;s a pretty simple form, with two text fields for the user credentials, a checkbox to indicate a preference for staying logged in, and a submit button. Flask-WTF also makes it easy to implement 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/patterns/wtforms/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data validation&lt;/a&gt;, which is very convenient.&lt;/p&gt;
&lt;h4 id=&#34;srcauthformspy&#34;&gt;src/auth/forms.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length, Email

class LoginForm(FlaskForm):
    email = StringField(&#39;Email&#39;, validators=[DataRequired(), Length(1, 64), Email()])
    password = PasswordField(&#39;Password&#39;, validators=[DataRequired()])
    remember_me = BooleanField(&#39;Stay logged in&#39;)
    submit = SubmitField(&#39;Sign in&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Flask-WTF will complain if you haven&amp;rsquo;t configured a secret key. This is used to cryptographically sign the user session such that an attacker cannot impersonate an authorized user to attack the web application (see also: &lt;a href=&#34;https://owasp.org/www-community/attacks/csrf&#34;&gt;cross-site request forgery&lt;/a&gt;).
  &lt;/div&gt;
&lt;/div&gt;















&lt;figure id=&#34;figure-bfig-1b-the-login-form-nothing-more-nothing-less&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-04-auth/login.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 1.&amp;lt;/b&amp;gt; The login form. Nothing more, nothing less.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-04-auth/login.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 1.&lt;/b&gt; The login form. Nothing more, nothing less.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;user-session-management&#34;&gt;User session management&lt;/h2&gt;
&lt;p&gt;After the user has correctly entered their credentials, we need to update the application state to reflect that the user has been authenticated. This is handled through another Flask extension, Flask-Login, that integrates nicely with the user model to keep track of authentication state.&lt;/p&gt;
&lt;p&gt;Flask-Login requires our User class to implement 
&lt;a href=&#34;https://flask-login.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;several properties and methods&lt;/a&gt;. This can be achieved by inheriting from Flask-Login&amp;rsquo;s &lt;code&gt;UserMixin&lt;/code&gt; class. We will be checking the &lt;code&gt;is_authenticated&lt;/code&gt; property in the HTML templates to test whether &amp;lsquo;authorized&amp;rsquo; content (i.e., a personalized greeting) should be displayed to the user.&lt;/p&gt;
&lt;p&gt;The final requirement of the User class is that it implements the &lt;code&gt;load_user()&lt;/code&gt; function. Flask-Login supplies this function with a user ID and expects to receive the corresponding user object. The &lt;code&gt;login_manager.user_loader&lt;/code&gt; decorator is used to register the callback with Flask-Login.&lt;/p&gt;
&lt;h4 id=&#34;srcauthviewspy&#34;&gt;src/auth/views.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
from . import db, login_manager

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;view-functions&#34;&gt;View functions&lt;/h2&gt;
&lt;p&gt;All the components that have been discussed so far &amp;mdash; password validation, database access, user authentication &amp;mdash; will come together in the authorization view functions. When the login page is requested, the login form will be sent to the user. If the user submits sensible-looking data, the application will first query the database to find a user whose email matches the one entered by the user. If either (a) no such user exists or (b) the password hashes don&amp;rsquo;t match, the application flashes an appropriate message and simply returns to the login form.&lt;/p&gt;
&lt;h4 id=&#34;srcauthviewspy-1&#34;&gt;src/auth/views.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import render_template, redirect, request, url_for, flash, session
from flask_login import login_user, logout_user, login_required
from . import auth
from ..models import User
from .forms import LoginForm

@auth.route(&#39;/login&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        # look for the user in the database and verify their password
        user = User.query.filter_by(email=form.email.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user, form.remember_me.data)
            next = request.args.get(&#39;next&#39;)
            if next is None or not next.startswith(&#39;/&#39;):
                # store some dummy data in the user session
                session[&#39;user_data&#39;] = {
                    &#39;username&#39;: user.username,
                    &#39;role&#39;: &#39;admin&#39;,
                    &#39;num_issues&#39;: 12,
                    &#39;num_messages&#39;: 2
                }
                next = url_for(&#39;main.index&#39;)
            return redirect(next)
        flash(&#39;Invalid username or password&#39;)

    return render_template(&#39;auth/login.html&#39;, form=form)

@auth.route(&#39;/logout&#39;)
@login_required
def logout():
    logout_user()
    flash(&#39;You have been signed out.&#39;)
    return redirect(url_for(&#39;main.index&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code that runs when a user logs in successfully is a little more complicated. After we tell Flask-Login that all went well (&lt;code&gt;login_user()&lt;/code&gt;), the &lt;code&gt;next&lt;/code&gt; attribute in the request needs to be tested. If the login form showed up because the unauthorized user tried to access a protected page, &lt;code&gt;next&lt;/code&gt; will hold the URL of that page and redirect to it. Otherwise, if &lt;code&gt;next&lt;/code&gt; is empty, the user is directed to the default &lt;code&gt;main.index&lt;/code&gt; endpoint. Before the redirect kicks in, the username (including some extra dummy information) is stored in the user session, to be accessed by the HTML templates.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    We also don&amp;rsquo;t want the &lt;code&gt;next&lt;/code&gt; URL to start with a slash, which indicates an absolute path (instead of a relative path). Allowing absolute redirects creates an opportunity for an attacker to redirect users to a site of their choosing. This is probably not a good thing!
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;grover-signs-in&#34;&gt;Grover signs in&lt;/h1&gt;
&lt;p&gt;All that&amp;rsquo;s left to do is give it a try!&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-2b-after-grover-signs-in-we-see-a-user-specific-greeting-together-with-some-dummy-data&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-04-auth/success.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 2.&amp;lt;/b&amp;gt; After Grover signs in, we see a user-specific greeting together with some dummy data.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-04-auth/success.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 2.&lt;/b&gt; After Grover signs in, we see a user-specific greeting together with some dummy data.
  &lt;/figcaption&gt;


&lt;/figure&gt;
















&lt;figure id=&#34;figure-bfig-3b-grover-signs-off-with-a-notification-informing-him-of-what-just-happened&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-04-auth/logout.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 3.&amp;lt;/b&amp;gt; Grover signs off, with a notification informing him of what just happened.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-04-auth/logout.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 3.&lt;/b&gt; Grover signs off, with a notification informing him of what just happened.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you&amp;rsquo;ve cloned the &lt;a href=&#34;https://github.com/ahadjinicolaou/issues.app&#34;&gt;project repository&lt;/a&gt;, you can run &lt;code&gt;git checkout f902914&lt;/code&gt; to get the current version of the source code.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Authorization deserves careful consideration in any application that holds sensitive information. The next steps for this project might involve creating user roles (e.g., administrator, manager, developer) that permit specific application functionality, including the ability to perform CRUD operations on projects, issues and messages. But building out the user interface might be more fun&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>issues.app (3): Modularity with Blueprints</title>
      <link>https://www.remotelycurious.net/post/issues-app-03-blueprints/</link>
      <pubDate>Fri, 25 Sep 2020 18:34:18 -0400</pubDate>
      <guid>https://www.remotelycurious.net/post/issues-app-03-blueprints/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This writeup is a result of my efforts to learn web app development with Flask. It builds on the codebase from the previous writeup, which you can find &lt;a href=&#34;https://www.remotelycurious.net/post/issues-app-02-templates/&#34;&gt;here&lt;/a&gt;. Any code documented here may change significantly in the future. &lt;strong&gt;Be warned!&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Today I&amp;rsquo;ll be documenting several structure-related changes that collectively represent a significant change to the codebase. In order of appearance, these changes are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switching from Flask-Bootstrap to Bootstrap-Flask (i.e. Bootstrap v3 to v4)&lt;/li&gt;
&lt;li&gt;relocating several source files for more meaningful project structure&lt;/li&gt;
&lt;li&gt;implementation of &lt;em&gt;blueprints&lt;/em&gt; for better code modularity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are not sexy changes, so to sweeten the deal, I&amp;rsquo;ve also gone ahead and cooked up the beginnings of a user interface for the project. You&amp;rsquo;ll get a glimpse of it as I detail the migration of the codebase to Bootstrap-Flask.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#using-better-templates&#34;&gt;Using better templates&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#switching-to-bootstrap-flask&#34;&gt;Switching to Bootstrap-Flask&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-proto-interface&#34;&gt;The proto-interface&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#the-base-template&#34;&gt;The base template&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#project-restructure&#34;&gt;Project restructure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#blueprints&#34;&gt;Blueprints&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#the-main-blueprint&#34;&gt;The main blueprint&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;using-better-templates&#34;&gt;Using better templates&lt;/h1&gt;
&lt;p&gt;The first order of business is to make a base template for the issue tracker. By defining page components and using template blocks (e.g., &lt;code&gt;{% block content %}&lt;/code&gt;), a base template can make page components available to a child template, such that the derived page can use or modify the base template&amp;rsquo;s content. I will use the base template to hold a &lt;em&gt;navbar&lt;/em&gt;, a horizontal component on the top of each app page that contains links to other pages, as well as other non-view-specific information (e.g., number of issues assigned to the logged-in user).&lt;/p&gt;
&lt;h2 id=&#34;switching-to-bootstrap-flask&#34;&gt;Switching to Bootstrap-Flask&lt;/h2&gt;
&lt;p&gt;One of the issues I discovered with Flask-Bootstrap is that the package uses Bootstrap 3. At first I didn&amp;rsquo;t see this as an issue, but the more I wanted to play around with the layout, the more time I was sinking into custom CSS changes and fighting the defaults. It&amp;rsquo;s worth noting that even though I am definitely &lt;strong&gt;not&lt;/strong&gt; an interface designer, nor a master of CSS, I am fussy when it comes to design. By the time I was satisfied with my navbar, more than &lt;em&gt;three hours&lt;/em&gt; had passed through a rapid cycle of Google searches, browser element inspection and minute CSS changes. And that&amp;rsquo;s just a single navbar!&lt;/p&gt;
&lt;p&gt;After reading so many Stack Overflow posts containing some variant of &amp;ldquo;this is resolved in v4&amp;rdquo;, I pulled the plug on Flask-Bootstrap and replaced it with 
&lt;a href=&#34;https://bootstrap-flask.readthedocs.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootstrap-Flask&lt;/a&gt;, which uses Bootstrap 4. If you are in any doubt about which version to use, take it from me: use v4.&lt;/p&gt;
&lt;h2 id=&#34;the-proto-interface&#34;&gt;The proto-interface&lt;/h2&gt;
&lt;p&gt;The first version of our issue tracker interface can be seen below. At this stage it&amp;rsquo;s really just the navbar with a very plain content page. Most of the what you&amp;rsquo;re looking at is described by a base template, with the content underneath the navbar filled out by each child template. We have four child templates, one for each major component in the app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the dashboard,&lt;/li&gt;
&lt;li&gt;the projects page,&lt;/li&gt;
&lt;li&gt;the issues page,&lt;/li&gt;
&lt;li&gt;the message page.&lt;/li&gt;
&lt;/ul&gt;















&lt;figure id=&#34;figure-bfig-1b-the-proto-interface-for-the-app&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-03-blueprints/interface.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 1.&amp;lt;/b&amp;gt; The proto-interface for the app.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-03-blueprints/interface.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 1.&lt;/b&gt; The proto-interface for the app.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Aside from some links to different application views, the navbar contains some other information. We have a couple of &lt;em&gt;badges&lt;/em&gt;: little numerical indicators that hold the number of active issues and unread messages for the user. There&amp;rsquo;s also a user dropdown menu that lists the username and their role. We will save a proper description of the major data entities underlying this project (users, projects, issues, messages, etc.) for when we get to implementing the project&amp;rsquo;s database. That will definitely warrant a separate writeup.&lt;/p&gt;
&lt;p&gt;Currently, each child template looks almost identical and pretty boring. This is what the dashboard template looks like:&lt;/p&gt;
&lt;h4 id=&#34;srctemplatesdashboardhtml&#34;&gt;src/templates/dashboard.html&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% extends &amp;quot;base.html&amp;quot; %}

{% block content %}
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;
            &amp;lt;h1&amp;gt;Dashboard&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;This test content comes from the dashboard template.&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike Flask-Bootstrap, Bootstrap-Flask does not come with its own base template, so 
&lt;a href=&#34;https://bootstrap-flask.readthedocs.io/en/stable/basic.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;you have to make one&lt;/a&gt;. The next section provides an overview of this project&amp;rsquo;s base template, as well as some important aspects of its design.&lt;/p&gt;
&lt;h3 id=&#34;the-base-template&#34;&gt;The base template&lt;/h3&gt;
&lt;p&gt;After leading with the &lt;code&gt;DOCTYPE&lt;/code&gt; tag, the base template includes some meta tags in the &lt;code&gt;head&lt;/code&gt; element that allow for the view to be 
&lt;a href=&#34;https://learn.shayhowe.com/advanced-html-css/responsive-web-design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;responsive&lt;/a&gt;, the effects of which will be shown soon. We also have some code that sets the favicon and loads CSS files, including Bootstrap and a custom CSS file for small design tweaks.&lt;/p&gt;
&lt;h4 id=&#34;srctemplatesbasehtml--head&#34;&gt;src/templates/base.html &amp;raquo; &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% block head %}
&amp;lt;!-- required meta tags --&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, shrink-to-fit=no&amp;quot;&amp;gt;

&amp;lt;!-- favicon resources --&amp;gt;
&amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; href=&amp;quot;{{ url_for(&#39;static&#39;, filename=&#39;favicon-16.png&#39;) }}&amp;quot; type=&amp;quot;image/png&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;icon&amp;quot; href=&amp;quot;{{ url_for(&#39;static&#39;, filename=&#39;favicon-16.png&#39;) }}&amp;quot; type=&amp;quot;image/png&amp;quot;&amp;gt;

{% block styles %}
&amp;lt;!-- bootstrap CSS --&amp;gt;
{{ bootstrap.load_css() }}
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ url_for(&#39;static&#39;, filename=&#39;custom.css&#39;) }}&amp;quot;&amp;gt;
{% endblock %}

&amp;lt;title&amp;gt;issues.app&amp;lt;/title&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the remaining code is within the &lt;code&gt;body&lt;/code&gt; element and is used to define the navbar. Bootstrap is a mobile-first framework, so it&amp;rsquo;s worth putting a bit of thought into the navbar&amp;rsquo;s layout for different window sizes. After deciding which components to include in the navbar, we can then choose which components to hide or &lt;em&gt;collapse&lt;/em&gt; when the display size is small enough.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A &lt;em&gt;mobile-first&lt;/em&gt; design philosophy is geared at making content look good on small displays (e.g., those of phones and tablets), before considering larger displays like laptop screens. This compels you to consider content before everything else, saving your screen real estate for what actually matters.
  &lt;/div&gt;
&lt;/div&gt;















&lt;figure id=&#34;figure-bfig-2b-a-collapsed-navbar-shows-a-hamburger-menu&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-03-blueprints/collapsed.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 2.&amp;lt;/b&amp;gt; A collapsed navbar shows a hamburger menu.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-03-blueprints/collapsed.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 2.&lt;/b&gt; A collapsed navbar shows a hamburger menu.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Components can be collapsed by nesting the components within a &lt;code&gt;div.collapse.navbar-collapse&lt;/code&gt; element. The &lt;code&gt;.navbar-toggler&lt;/code&gt; class is used to bundle collapsed components into a hamburger menu that references the components using the &lt;code&gt;#navbarNavDropdown&lt;/code&gt; ID. The &lt;code&gt;navbar-brand&lt;/code&gt; element, used to access the dashboard, will always be shown.&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-3b-opening-up-the-menu&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-03-blueprints/collapsed-menu.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 3.&amp;lt;/b&amp;gt; Opening up the menu.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-03-blueprints/collapsed-menu.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 3.&lt;/b&gt; Opening up the menu.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h4 id=&#34;srctemplatesbasehtml--body&#34;&gt;src/templates/base.html &amp;raquo; &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;navbar navbar-fixed-top navbar-expand-md navbar-light bg-light&amp;quot;&amp;gt;
    &amp;lt;!-- app brand --&amp;gt;
    &amp;lt;a class=&amp;quot;navbar-brand&amp;quot; href=&amp;quot;{{ url_for(&#39;index&#39;) }}&amp;quot;&amp;gt;
        &amp;lt;img class=&amp;quot;d-inline-block align-top&amp;quot; src=&amp;quot;{{ url_for(&#39;static&#39;, filename=&#39;favicon-32.png&#39;) }}&amp;quot; &amp;gt;
        issues.app
    &amp;lt;/a&amp;gt;

    &amp;lt;!-- hamburger menu --&amp;gt;
    &amp;lt;button class=&amp;quot;navbar-toggler&amp;quot; type=&amp;quot;button&amp;quot; data-toggle=&amp;quot;collapse&amp;quot; data-target=&amp;quot;#navbarNavDropdown&amp;quot; aria-controls=&amp;quot;navbarNavDropdown&amp;quot; aria-expanded=&amp;quot;false&amp;quot; aria-label=&amp;quot;Toggle navigation&amp;quot;&amp;gt;
        &amp;lt;span class=&amp;quot;navbar-toggler-icon&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/button&amp;gt;
    
    &amp;lt;!-- items below collapse into the menu above--&amp;gt;
    &amp;lt;div class=&amp;quot;collapse navbar-collapse&amp;quot; id=&amp;quot;navbarNavDropdown&amp;quot;&amp;gt;
        &amp;lt;!-- logged-in user dropdown --&amp;gt;
        &amp;lt;ul class=&amp;quot;navbar-nav ml-auto order-1&amp;quot;&amp;gt;
            &amp;lt;li class=&amp;quot;nav-item dropdown&amp;quot;&amp;gt;
                &amp;lt;a class=&amp;quot;nav-link dropdown-toggle&amp;quot; href=&amp;quot;#&amp;quot; id=&amp;quot;navbarUserDropdown&amp;quot; role=&amp;quot;button&amp;quot; data-toggle=&amp;quot;dropdown&amp;quot; aria-haspopup=&amp;quot;true&amp;quot; aria-expanded=&amp;quot;false&amp;quot;&amp;gt;
                    &amp;amp;nbsp;{{ user_data[&#39;user&#39;] }}&amp;lt;span class=&amp;quot;badge badge-secondary&amp;quot;&amp;gt;{{ user_data[&#39;role&#39;] }}&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;

                &amp;lt;div class=&amp;quot;dropdown-menu&amp;quot; aria-labelledby=&amp;quot;navbarUserDropdown&amp;quot;&amp;gt;
                    &amp;lt;a class=&amp;quot;dropdown-item&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Profile&amp;lt;/a&amp;gt;
                    &amp;lt;a class=&amp;quot;dropdown-item&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Settings&amp;lt;/a&amp;gt;
                    &amp;lt;div class=&amp;quot;dropdown-divider&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                    &amp;lt;a class=&amp;quot;dropdown-item&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Sign out&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;

        &amp;lt;!-- major app sections --&amp;gt;
        &amp;lt;ul class=&amp;quot;navbar-nav mr-auto order-0&amp;quot;&amp;gt;
            &amp;lt;li class=&amp;quot;nav-item {{ &#39;active&#39; if is_active[&#39;projects&#39;] }}&amp;quot;&amp;gt;
                &amp;lt;a class=&amp;quot;nav-link d-flex align-items-center&amp;quot; href=&amp;quot;{{ url_for(&#39;projects&#39;) }}&amp;quot;&amp;gt;
                    &amp;amp;nbsp;Projects&amp;amp;nbsp;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&amp;quot;nav-item {{ &#39;active&#39; if is_active[&#39;issues&#39;] }}&amp;quot;&amp;gt;
                &amp;lt;a class=&amp;quot;nav-link d-flex align-items-center&amp;quot; href=&amp;quot;{{ url_for(&#39;issues&#39;) }}&amp;quot;&amp;gt;
                    &amp;amp;nbsp;Issues&amp;amp;nbsp;{% if user_data[&#39;num_issues&#39;] %}&amp;lt;span class=&amp;quot;badge badge-pill badge-primary&amp;quot;&amp;gt;{{ user_data[&#39;num_issues&#39;] }}&amp;lt;/span&amp;gt;{% endif %}
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&amp;quot;nav-item {{ &#39;active&#39; if is_active[&#39;messages&#39;] }}&amp;quot;&amp;gt;
                &amp;lt;a class=&amp;quot;nav-link d-flex align-items-center&amp;quot; href=&amp;quot;{{ url_for(&#39;messages&#39;) }}&amp;quot;&amp;gt;
                    &amp;amp;nbsp;Messages&amp;amp;nbsp;{% if user_data[&#39;num_messages&#39;] %}&amp;lt;span class=&amp;quot;badge badge-pill badge-primary&amp;quot;&amp;gt;{{ user_data[&#39;num_messages&#39;] }}&amp;lt;/span&amp;gt;{% endif %}
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the code above, you will notice some Jinja statements sprinkled around the place. The statements that populate the navbar user data access a dictionary called &lt;code&gt;user_data&lt;/code&gt;, which is supplied to Jinja through each view function. For example, the projects template is rendered within the &lt;code&gt;projects()&lt;/code&gt; view function as shown below.&lt;/p&gt;
&lt;h4 id=&#34;srcmaininitpy--create_app&#34;&gt;src/main/init.py &amp;raquo; &lt;code&gt;create_app()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/projects&#39;)
def projects():
    return render_template(&#39;projects.html&#39;,
        is_active={&#39;projects&#39;: True},
        user_data=get_user_data())

def get_user_data():
    return {
      &#39;user&#39;: &#39;ahadjinicolaou&#39;,
      &#39;role&#39;: &#39;admin&#39;,
      &#39;num_issues&#39;: 12,
      &#39;num_messages&#39;: 2}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the function &lt;code&gt;get_user_data()&lt;/code&gt; is just returning some dummy data here, you can imagine this function being rewritten to say, query a &lt;code&gt;Users&lt;/code&gt; table in a database and parse the results to create a proper user data dictionary.&lt;/p&gt;
&lt;p&gt;Another point worth noting is the use of Flask&amp;rsquo;s &lt;code&gt;url_for()&lt;/code&gt; function. Recall that we declare view functions in our code using the &lt;code&gt;app.route&lt;/code&gt; decorator. Flask keeps track of the association between each URL rule (e.g. &lt;code&gt;/projects&lt;/code&gt;) and its view function using the app instance&amp;rsquo;s URL map. You can inspect the URL map for the application by accessing &lt;code&gt;app.url_map&lt;/code&gt; within the main package constructor.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Map([&amp;lt;Rule &#39;/projects&#39; (HEAD, OPTIONS, GET) -&amp;gt; projects&amp;gt;,
    &amp;lt;Rule &#39;/messages&#39; (HEAD, OPTIONS, GET) -&amp;gt; messages&amp;gt;,
    &amp;lt;Rule &#39;/issues&#39; (HEAD, OPTIONS, GET) -&amp;gt; issues&amp;gt;,
    &amp;lt;Rule &#39;/&#39; (HEAD, OPTIONS, GET) -&amp;gt; index&amp;gt;,
    &amp;lt;Rule &#39;/bootstrap/static/&amp;lt;filename&amp;gt;&#39; (HEAD, OPTIONS, GET) -&amp;gt; bootstrap.static&amp;gt;,
    &amp;lt;Rule &#39;/static/&amp;lt;filename&amp;gt;&#39; (HEAD, OPTIONS, GET) -&amp;gt; static&amp;gt;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;rsquo;s some extra stuff in here that we have yet to discuss, but the main takeaway is that for every URL rule, there is an &lt;em&gt;endpoint&lt;/em&gt; that identifies the function Flask should use to handle the associated request. By default, Flask uses the name of the function as the endpoint. We can see that, for instance, a request for &lt;code&gt;/projects&lt;/code&gt; will be handled using the &lt;code&gt;projects()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;We will take another look at this URL map after restructuring our code to use &lt;em&gt;blueprints&lt;/em&gt;, but before we get to that, we need to make a quick fix.&lt;/p&gt;
&lt;h1 id=&#34;project-restructure&#34;&gt;Project restructure&lt;/h1&gt;
&lt;p&gt;As I was looking at my project structure, it dawned on me that the location of some files doesn&amp;rsquo;t make a lot of sense. I&amp;rsquo;m looking at &lt;code&gt;issues.py&lt;/code&gt;, &lt;code&gt;config.py&lt;/code&gt;, and &lt;code&gt;__init__.py&lt;/code&gt;, all of which are located in &lt;code&gt;src/main&lt;/code&gt;. The first two don&amp;rsquo;t need to be so deep within the project structure &amp;ndash; in fact, they should be in the project root, since they don&amp;rsquo;t rely on any project-specific packages. There are two consequences of moving these two files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;FLASK_APP&lt;/code&gt; environment variable should now be set to &lt;code&gt;issues.py&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;config&lt;/code&gt; dictionary within &lt;code&gt;__init__.py&lt;/code&gt; should now be imported &lt;code&gt;from config&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speaking of &lt;code&gt;__init__.py&lt;/code&gt;, since it contains the &lt;code&gt;create_app()&lt;/code&gt; factory function, this file should be a package constructor for the &lt;em&gt;src&lt;/em&gt; package, rather than the &lt;em&gt;main&lt;/em&gt; subpackage. Moving this file to the &lt;code&gt;src&lt;/code&gt; directory allows us to keep our project subpackages (containing different functionality for the app) all in one place. The &lt;code&gt;src/main&lt;/code&gt; folder (empty at this point) can instead be used to keep our view functions and error response functions, which we will get to as we further modularize the codebase.&lt;/p&gt;
&lt;p&gt;Moving &lt;code&gt;__init__.py&lt;/code&gt; requires us to make changes to the arguments in the &lt;code&gt;Flask&lt;/code&gt; object initializer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template_folder=&#39;./templates&#39;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_folder=&#39;./static&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also need to update the factory function import statement in the &lt;code&gt;tests/conftest.py&lt;/code&gt; file: &lt;code&gt;from src import create_app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alright, we&amp;rsquo;re finally ready to talk blueprints!&lt;/p&gt;
&lt;h1 id=&#34;blueprints&#34;&gt;Blueprints&lt;/h1&gt;
&lt;p&gt;One obvious way to better segment our codebase is to somehow isolate our HTML response functions (stuffed within the &lt;code&gt;create_app()&lt;/code&gt; factory function) within their own file. There&amp;rsquo;s a wrinkle in that idea, however: outside of the package constructor, the response functions no longer have access to the &lt;code&gt;app&lt;/code&gt; variable, and by extension, the &lt;code&gt;app.route&lt;/code&gt; decorator.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s where the 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/blueprints/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blueprint&lt;/a&gt; class can help. A blueprint can be used to store all of these response-serving functions, without being attached to the application instance. All that functionality sits in a dormant state, waiting to be registered with the application. Once registered, the functions get grafted onto the app and the instance finds itself with additional powers, just as nature had intended.&lt;/p&gt;
&lt;h2 id=&#34;the-main-blueprint&#34;&gt;The main blueprint&lt;/h2&gt;
&lt;p&gt;After moving the factory function code into &lt;code&gt;src&lt;/code&gt;, we were left with an empty &lt;code&gt;src/main&lt;/code&gt; folder. We will promptly repurpose this folder to house the &lt;em&gt;main blueprint&lt;/em&gt; &amp;ndash; the blueprint that tells Flask how to render all of our major app components. All of our response and error functions will now be kept in a &lt;code&gt;main&lt;/code&gt; package constructor file. Note that we have to use the &lt;code&gt;main.route&lt;/code&gt; view decorator associated with the main blueprint.&lt;/p&gt;
&lt;p&gt;We also have to use the &lt;code&gt;main.app_errorhandler&lt;/code&gt; decorator to handle our 404 response throughout the whole app. Using the &lt;code&gt;main.errorhandler&lt;/code&gt; decorator would tell Flask to run this error function only for routes defined by the main blueprint.&lt;/p&gt;
&lt;h4 id=&#34;srcmain__init__py&#34;&gt;src/main/__init__.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Blueprint
from flask import render_template

main = Blueprint(&#39;main&#39;, __name__)

@main.route(&#39;/&#39;)
def index():
    return render_template(&#39;dashboard.html&#39;,
            is_active={},
            user_data=get_user_data())

@main.route(&#39;/projects&#39;)
def projects():
    return render_template(&#39;projects.html&#39;,
            is_active={&#39;projects&#39;: True},
            user_data=get_user_data())

@main.route(&#39;/issues&#39;)
def issues():
    return render_template(&#39;issues.html&#39;,
            is_active={&#39;issues&#39;: True},
            user_data=get_user_data())

@main.route(&#39;/messages&#39;)
def messages():
    return render_template(&#39;messages.html&#39;,
            is_active={&#39;messages&#39;: True},
            user_data=get_user_data())

@main.app_errorhandler(404)
def page_not_found(e):
    return render_template(&amp;quot;404.html&amp;quot;,
            is_active={},
            user_data={}), 404

def get_user_data():
    return {
        &#39;user&#39;: &#39;ahadjinicolaou&#39;,
        &#39;role&#39;: &#39;admin&#39;,
        &#39;num_issues&#39;: 12,
        &#39;num_messages&#39;: 2}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After defining the blueprint, we need to register it within the factory function.&lt;/p&gt;
&lt;h4 id=&#34;src__init__py&#34;&gt;src/__init__.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
from flask import Blueprint

# factory function
def create_app(config_name):
    app = Flask(__name__, template_folder=&#39;./templates&#39;, static_folder=&#39;./static&#39;)
    app.config.from_object(config[config_name])

    bootstrap.init_app(app)

    from src.main import main as main_blueprint
    app.register_blueprint(main_blueprint)

    return app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that chatter about Flask&amp;rsquo;s URL map? If we print it out now, you&amp;rsquo;ll see that the endpoints for &lt;code&gt;main_blueprint&lt;/code&gt;&#39;s URL rules have been updated to include the &lt;code&gt;main.&lt;/code&gt; prefix.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Map([&amp;lt;Rule &#39;/projects&#39; (GET, OPTIONS, HEAD) -&amp;gt; main.projects&amp;gt;,
    &amp;lt;Rule &#39;/messages&#39; (GET, OPTIONS, HEAD) -&amp;gt; main.messages&amp;gt;,
    &amp;lt;Rule &#39;/issues&#39; (GET, OPTIONS, HEAD) -&amp;gt; main.issues&amp;gt;,
    &amp;lt;Rule &#39;/&#39; (GET, OPTIONS, HEAD) -&amp;gt; main.index&amp;gt;,
    &amp;lt;Rule &#39;/bootstrap/static/&amp;lt;filename&amp;gt;&#39; (GET, OPTIONS, HEAD) -&amp;gt; bootstrap.static&amp;gt;,
    &amp;lt;Rule &#39;/static/&amp;lt;filename&amp;gt;&#39; (GET, OPTIONS, HEAD) -&amp;gt; static&amp;gt;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this means that we have to change the corresponding endpoints referenced in the templates. A call to &lt;code&gt;url_for(&#39;index&#39;)&lt;/code&gt; for example will be replaced by &lt;code&gt;url_for(&#39;main.index&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After relaunching the server and making sure we haven&amp;rsquo;t broken anything, we should see&amp;hellip; no difference. Brilliant.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you&amp;rsquo;ve cloned the &lt;a href=&#34;https://github.com/ahadjinicolaou/issues.app&#34;&gt;project repository&lt;/a&gt;, you can run &lt;code&gt;git checkout cff1a49&lt;/code&gt; to get the current version of the source code.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;After a little bit of futzing with the codebase, we have ourselves a highly modular codebase that allows us to cleanly segment presentation code from application logic. It&amp;rsquo;s also nice to have the beginnings of what will hopefully become a clean, functional user interface fit for an issue tracker.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also happier after having moved those three project files to more suitable locations &amp;ndash; frankly, their previous locations were an afterthought that I should have noticed earlier. Better late than never!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>issues.app (2): Making templates with Bootstrap</title>
      <link>https://www.remotelycurious.net/post/issues-app-02-templates/</link>
      <pubDate>Sun, 13 Sep 2020 20:21:12 -0400</pubDate>
      <guid>https://www.remotelycurious.net/post/issues-app-02-templates/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This writeup is a result of my efforts to learn web app development with Flask. It builds on the codebase from the previous writeup, which you can find &lt;a href=&#34;https://www.remotelycurious.net/post/issues-app-01-intro/&#34;&gt;here&lt;/a&gt;. Any code documented here may change significantly in the future. &lt;strong&gt;Be warned!&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The last article ended with a quick mention about how Python functions can be assigned to handle browser requests in a Flask application. It&amp;rsquo;s a topic that is definitely worth more of our time. We are going to talk about &lt;em&gt;templates&lt;/em&gt;: what they are, how they work, and how they can integrate with Bootstrap to make life easier for developers.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#view-decorators&#34;&gt;View decorators&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#static-routes&#34;&gt;Static routes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#dynamic-routes&#34;&gt;Dynamic routes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#error-handlers&#34;&gt;Error handlers&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#templates&#34;&gt;Templates&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#jinja-templates&#34;&gt;Jinja templates&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#variables-and-expressions&#34;&gt;Variables and expressions&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#filters&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#statements&#34;&gt;Statements&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#template-inheritance&#34;&gt;Template inheritance&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#using-templates&#34;&gt;Using templates&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#templates-with-bootstrap&#34;&gt;Templates with Bootstrap&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#plugging-bootstrap-into-flask&#34;&gt;Plugging Bootstrap into Flask&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#making-nicer-templates&#34;&gt;Making nicer templates&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;view-decorators&#34;&gt;View decorators&lt;/h1&gt;
&lt;p&gt;In general, decorators are Python constructs that allow you to inject functions with additional capabilities. Flask provides a number of 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/patterns/viewdecorators/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;view decorators&lt;/em&gt;&lt;/a&gt; that can be used to conveniently enable web-specific functionality, making it easy to get things done with minimal code. What follows is a quick tour of some of the most common view decorators you will find in a Flask application.&lt;/p&gt;
&lt;h2 id=&#34;static-routes&#34;&gt;Static routes&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve already seen one of these. A static route can be implemented with the &lt;code&gt;app.route&lt;/code&gt; decorator to handle a browser request for a single URL. Here&amp;rsquo;s what that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/&#39;)
def index():
    return &#39;&amp;lt;h1&amp;gt;Show me the money!&amp;lt;/h1&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Officially, functions that respond to requests are called &lt;em&gt;view functions&lt;/em&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;dynamic-routes&#34;&gt;Dynamic routes&lt;/h2&gt;
&lt;p&gt;We can write another function that uses a &lt;em&gt;dynamic route&lt;/em&gt; to serve a customized greeting to the user, using the &lt;code&gt;name&lt;/code&gt; argument. Angle brackets are used in the decorator argument to indicate how the function argument should be parsed from the requested URL.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/greeting/&amp;lt;name&amp;gt;&#39;)
def greeting(name):
    return f&amp;quot;&amp;lt;h1&amp;gt;Hi {name.capitalize()}!&amp;lt;/h1&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After adding this to &lt;code&gt;src/main/__init__.py&lt;/code&gt; and running the server, a trip to &lt;code&gt;/greeting/fred&lt;/code&gt; would serve you with the following:&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-1b-a-personalized-greeting&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-02-templates/greeting.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 1.&amp;lt;/b&amp;gt; A personalized greeting.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-02-templates/greeting.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 1.&lt;/b&gt; A personalized greeting.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;error-handlers&#34;&gt;Error handlers&lt;/h2&gt;
&lt;p&gt;Sometimes it&amp;rsquo;s nice to provide a customized error page. This can be achieved using the &lt;code&gt;app.errorhandler&lt;/code&gt; decorator. The decorated function must have an error object argument. It&amp;rsquo;s good practice to return the matching error code together with the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.errorhandler(404)
def not_found(e):
    return &amp;quot;&amp;lt;h1&amp;gt;Looks like I can&#39;t find that page...&amp;lt;/h1&amp;gt;&amp;quot;, 404
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;templates&#34;&gt;Templates&lt;/h1&gt;
&lt;p&gt;Handling chunks of web code amid our Python source feels a bit dirty. It&amp;rsquo;s probably not a big deal if our view function is returning a one-line response, but imagine the kind of content that Facebook is serving. We&amp;rsquo;re talking reams of HTML, stitched together from different sources that need to be filtered and processed according to the user&amp;rsquo;s data. Sorting this out with a little string interpolation isn&amp;rsquo;t going to cut it. We need a bigger gun.&lt;/p&gt;
&lt;p&gt;This is where &lt;em&gt;templates&lt;/em&gt; come in. A template is a like a mold that is used to mass produce web pages. The mold is made out of standard HTML elements like &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;div&lt;/code&gt; and has slots reserved for data that will become available in the future. When the data is ready, a template engine can take a template, fill the data slots, and &lt;em&gt;render&lt;/em&gt; the complete page. This allows for presentation logic to be isolated from the rest of the code, simplifying application maintenance and making debugging a bit less painful.&lt;/p&gt;
&lt;h2 id=&#34;jinja-templates&#34;&gt;Jinja templates&lt;/h2&gt;
&lt;p&gt;Flask uses a template engine called 
&lt;a href=&#34;https://palletsprojects.com/p/jinja/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jinja2&lt;/a&gt; to &lt;em&gt;render&lt;/em&gt; templates with data. Jinja templates are usually just HTML files (although 
&lt;a href=&#34;https://jinja.palletsprojects.com/en/2.11.x/templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;other file formats&lt;/a&gt; are supported). They will typically contain HTML as well as &lt;em&gt;variables&lt;/em&gt; and &lt;em&gt;expressions&lt;/em&gt; that are recognized by Jinja and replaced when rendered.&lt;/p&gt;
&lt;p&gt;We will now explore some basic Jinja template constructs, with an eye towards making better (or at least more flexible) versions of our greeting functions.&lt;/p&gt;
&lt;h3 id=&#34;variables-and-expressions&#34;&gt;Variables and expressions&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s say Jinja is told to render the template below using a &lt;code&gt;name&lt;/code&gt; variable equal to &lt;code&gt;&#39;fred&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;Hi {{ name }}!&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;{{ ... }}&lt;/code&gt; delimiters indicate an &lt;em&gt;expression&lt;/em&gt; that Jinja will replace with some kind of output, which in this case is a string literal. Jinja will output &lt;strong&gt;Hi fred!&lt;/strong&gt; after rendering this template.&lt;/p&gt;
&lt;p&gt;Variables can also be more complex objects like lists and dictionaries. We&amp;rsquo;ll see an example of this very soon when we introduce &lt;em&gt;statements&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;filters&#34;&gt;Filters&lt;/h3&gt;
&lt;p&gt;Jinja has &lt;em&gt;filters&lt;/em&gt; that can be applied to modify variables using the pipe (&lt;code&gt;|&lt;/code&gt;) operator. Below are a few examples of templates with their rendered output:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Template&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name=&#39;fred&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hi {{ name | upper }}!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Hi FRED!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name=&#39;emma&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hi {{ name | capitalize }}!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Hi Emma!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name=None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hi {{ name | default(&#39;Stranger&#39;)}}!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Hi Stranger!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;price=7.283&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;That is ${{ price | round(2, &#39;floor&#39;) }}.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;That is $7.28.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Multiple filters can also be chained together, but keep in mind the order of operations. As a contrived example, consider the effect of &lt;code&gt;{{ name | default(&#39;stranger&#39;) | upper }}&lt;/code&gt; versus that of &lt;code&gt;{{ name | upper | default(&#39;stranger&#39;) }}&lt;/code&gt; when &lt;code&gt;name=None&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;statements&#34;&gt;Statements&lt;/h3&gt;
&lt;p&gt;Jinja becomes considerably more powerful when using &lt;em&gt;statements&lt;/em&gt; to control the specific elements that are rendered. Statements are indicated by &lt;code&gt;{% ... %}&lt;/code&gt; delimiters.&lt;/p&gt;
&lt;p&gt;Imagine we have some kind of shopping list. We can use Jinja to create a bulleted list of our items with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{% for item in shopping_list %}
    &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if the shopping list contains &lt;code&gt;[&amp;quot;bread&amp;quot;, &amp;quot;milk&amp;quot;, &amp;quot;eggs&amp;quot;, &amp;quot;toy dinosaur&amp;quot;]&lt;/code&gt;, Jinja will render it as a nice bulleted list (simulated with Markdown):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bread&lt;/li&gt;
&lt;li&gt;milk&lt;/li&gt;
&lt;li&gt;eggs&lt;/li&gt;
&lt;li&gt;toy dinosaur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think about our app for a second. Suppose we want to offer up a VIP version of our greeting to users that know the right URL. We can get fancy with our template and have it render a greeting that is sensitive to the time of day, using Jinja to temporarily store different greetings inside variables.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% if hour &amp;gt;= 0 and hour &amp;lt; 12 %}
    {% set greeting = &#39;Good morning&#39; %}
{% elif hour &amp;gt;= 12 and hour &amp;lt; 17 %}
    {% set greeting = &#39;Good afternoon&#39; %}
{% else %}
    {% set greeting = &#39;Good evening&#39; %}
{% endif %}

&amp;lt;h1&amp;gt;{{ greeting }}, {{ name | capitalize }}.&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case the template engine would be dealing with three variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;hour&lt;/code&gt;, supplied by the application, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;greeting&lt;/code&gt;, set within the template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;template-inheritance&#34;&gt;Template inheritance&lt;/h3&gt;
&lt;p&gt;Before we get our hands on some templates, we should talk about &lt;em&gt;template inheritance&lt;/em&gt;. As plain and unexciting as that sounds, you should know that this is the most powerful part of Jinja&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Template inheritance allows you to create a &amp;ldquo;master template&amp;rdquo; that holds all of the common web elements of your site as well as &lt;em&gt;blocks&lt;/em&gt; that child templates can either build on or completely replace.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you&amp;rsquo;re following the project, note that the templates in this section are just provided to illustrate the concepts. They will not be included in the codebase.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To get a better understanding of what we&amp;rsquo;re talking about, let&amp;rsquo;s use an example pair of templates: one base, one child. Below is &lt;code&gt;base.html&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;basehtml&#34;&gt;base.html&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    {% block head %}
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
        .important { color: #FF0000; }
    &amp;lt;/style&amp;gt;
    &amp;lt;title&amp;gt;{% block title %}{% endblock %} :: ACME LLC&amp;lt;/title&amp;gt;
    {% endblock %}
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    {% block content %}{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like a regular HTML page seasoned with some Jinja statements. The base template defines three blocks: &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;. Each of these can be overridden by a derived template, like the one below:&lt;/p&gt;
&lt;h4 id=&#34;childhtml&#34;&gt;child.html&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% extends &amp;quot;base.html&amp;quot; %}
{% block title %}Goods and Services{% endblock %}
{% block head %}
    {{ super() }}
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
        .special { color: #0000FF; }
    &amp;lt;/style&amp;gt;
{% endblock %}
{% block content %}
    &amp;lt;h1&amp;gt;Goods and Services&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;Bread&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt;
        &amp;lt;li class=&amp;quot;important&amp;quot;&amp;gt;Eggs&amp;lt;/li&amp;gt;
        &amp;lt;li class=&amp;quot;special&amp;quot;&amp;gt;Toy dinosaur&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The line that makes it a child template is the very first one. With the &lt;code&gt;{% extends &amp;quot;base.html&amp;quot; %}&lt;/code&gt; statement, we are telling Jinja that the current template is inheriting from &lt;code&gt;base.html&lt;/code&gt;. When the base and derived templates both contain a nonempty block, the content in the derived block takes precedence.&lt;/p&gt;
&lt;p&gt;Note the use of &lt;code&gt;super()&lt;/code&gt; within the head block. This tells Jinja to append the block&amp;rsquo;s content to the corresponding block content in the base template. Without the &lt;code&gt;super()&lt;/code&gt; call, the child template would completely replace the base template block and we would lose the &lt;code&gt;important&lt;/code&gt; CSS class defined in the base template.&lt;/p&gt;
&lt;p&gt;Jinja is capable of a lot more. We will cover more of its features in later articles, but for now let&amp;rsquo;s make some templates and refactor the codebase to make use of them.&lt;/p&gt;
&lt;h2 id=&#34;using-templates&#34;&gt;Using templates&lt;/h2&gt;
&lt;p&gt;First we should designate a folder to keep our templates. This will be &lt;code&gt;src/templates&lt;/code&gt;. We are going to make two templates: one for the plain greeting and another for the VIP greeting (we&amp;rsquo;ll leave the 404 and index view functions &amp;ldquo;template-less&amp;rdquo; for now). The plain template is shown below.&lt;/p&gt;
&lt;h4 id=&#34;srctemplatesgreetinghtml&#34;&gt;src/templates/greeting.html&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Hi {{ name | capitalize }}!&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;rsquo;s the fancy one.&lt;/p&gt;
&lt;h4 id=&#34;srctemplatesfancy-greetinghtml&#34;&gt;src/templates/fancy-greeting.html&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;{# time-sensitive greeting #}
{% if hour &amp;gt;= 0 and hour &amp;lt; 12 %}
    {% set greeting = &#39;Good morning&#39; %}
{% elif hour &amp;gt;= 12 and hour &amp;lt; 17 %}
    {% set greeting = &#39;Good afternoon&#39; %}
{% else %}
    {% set greeting = &#39;Good evening&#39; %}
{% endif %}

&amp;lt;h1&amp;gt;{{ greeting }}, {{ name | capitalize }}.&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;GreetMaster™: delivering you the finest of greetings.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need a way to engage the template engine in our app. This is done using &lt;code&gt;render_template()&lt;/code&gt;, which comes from the &lt;code&gt;flask&lt;/code&gt; package. Each view function supplies &lt;code&gt;render_template()&lt;/code&gt; with the appropriate template filename and any keyword arguments that Jinja needs to populate the corresponding variables in the template.&lt;/p&gt;
&lt;h4 id=&#34;srcmain__init__py&#34;&gt;src/main/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ...
from flask import render_template
from datetime import datetime

def create_app(config_name):
    # ...
    @app.route(&#39;/greeting/&amp;lt;name&amp;gt;&#39;)
    def greeting(name):
        return render_template(&#39;greeting.html&#39;, name=name)

    @app.route(&#39;/fancy-greeting/&amp;lt;name&amp;gt;&#39;)
    def fancy_greeting(name):
        return render_template(&#39;fancy_greeting.html&#39;,
                name=name,
                hour=datetime.now().hour)

    @app.errorhandler(404)
    def not_found(e):
        return &amp;quot;&amp;lt;h1&amp;gt;Looks like I can&#39;t find that page...&amp;lt;/h1&amp;gt;&amp;quot;, 404
    
    return app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, Flask needs to be told where we are keeping the templates (otherwise, Flask will assume they are in a &lt;code&gt;templates&lt;/code&gt; folder that sits in the same directory as the app&amp;rsquo;s instantiating file). The &lt;code&gt;create_app()&lt;/code&gt; function is changed like this:&lt;/p&gt;
&lt;h4 id=&#34;srcmain__init__py-1&#34;&gt;src/main/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def create_app(config_name):
    app = Flask(__name__, template_folder=&#39;../templates&#39;)
    # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can fire up the server and serve ourselves with a magnificent greeting page. Since I&amp;rsquo;m typing this up at ~10 PM, I am treated with an evening salutation.&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-3b-a-greetmaster-greeting&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-02-templates/fancy-greeting.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 3.&amp;lt;/b&amp;gt; A GreetMaster™ greeting.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-02-templates/fancy-greeting.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 3.&lt;/b&gt; A GreetMaster™ greeting.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h1 id=&#34;templates-with-bootstrap&#34;&gt;Templates with Bootstrap&lt;/h1&gt;
&lt;p&gt;Our templates are handy but they&amp;rsquo;re ugly. Fortunately, a bunch of people at Twitter came up with 
&lt;a href=&#34;https://getbootstrap.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootstrap&lt;/a&gt;, an open-source front-end framework that can integrate with Flask and style our templates. We can plug it into our app as a Flask extension with minimal fuss. That&amp;rsquo;s a big reason you&amp;rsquo;re reading about it right now.&lt;/p&gt;
&lt;h2 id=&#34;plugging-bootstrap-into-flask&#34;&gt;Plugging Bootstrap into Flask&lt;/h2&gt;
&lt;p&gt;Adding support for Bootstrap within Flask is easy, thanks to the 
&lt;a href=&#34;https://pythonhosted.org/Flask-Bootstrap/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flask-Bootstrap&lt;/a&gt; extension. Below we&amp;rsquo;ll add &lt;code&gt;flask-bootstrap&lt;/code&gt; as a project dependency. Make sure to install it in your virtual environment.&lt;/p&gt;
&lt;h4 id=&#34;setuppy&#34;&gt;setup.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from setuptools import setup, find_packages

setup(
    name=&#39;issues&#39;,
    version=&#39;0.2&#39;,
    packages=find_packages(),
    install_requires=[&amp;quot;flask&amp;quot;, &amp;quot;pytest&amp;quot;, &amp;quot;pytest-flask&amp;quot;, &amp;quot;flask-bootstrap&amp;quot;],
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bootstrap can now be installed as an app extension using the &lt;code&gt;init_app()&lt;/code&gt; instance method within the main package constructor.&lt;/p&gt;
&lt;h4 id=&#34;srcmain__init__py-2&#34;&gt;src/main/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ...
from flask import Flask
from flask_bootstrap import Bootstrap

bootstrap = Bootstrap()

def create_app(config_name):
    app = Flask(__name__, template_folder=&#39;../templates&#39;)
    app.config.from_object(config[config_name])

    bootstrap.init_app(app)
    # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It turns out that 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/extensiondev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;all approved Flask extensions&lt;/a&gt; will implement the &lt;code&gt;init_app()&lt;/code&gt; method. The major upshot of this (application factory) pattern is to allow multiple instances of our application to use a single extension instance. That&amp;rsquo;s good news for people like us who are interested in using a test framework during development.&lt;/p&gt;
&lt;h2 id=&#34;making-nicer-templates&#34;&gt;Making nicer templates&lt;/h2&gt;
&lt;p&gt;With the help of Bootstrap, we are going to drag our templates out of the 90s and into the modern age. This is done by having our templates inherit from Flask-Bootstrap&amp;rsquo;s base template. Let&amp;rsquo;s see how this works with our fancy greeting template.&lt;/p&gt;
&lt;h4 id=&#34;srctemplatesfancy_greetinghtml&#34;&gt;src/templates/fancy_greeting.html&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;{% extends &amp;quot;bootstrap/base.html&amp;quot; %}

{# time-sensitive greeting #}
{% if hour &amp;gt;= 0 and hour &amp;lt; 12 %}
    {% set greeting = &#39;Good morning&#39; %}
{% elif hour &amp;gt;= 12 and hour &amp;lt; 17 %}
    {% set greeting = &#39;Good afternoon&#39; %}
{% else %}
    {% set greeting = &#39;Good evening&#39; %}
{% endif %}

{% block title %}GreetMaster{% endblock %}

{% block content %}
&amp;lt;div class=&amp;quot;jumbotron jumbotron-fluid&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;h1 class=&amp;quot;display-4&amp;quot;&amp;gt;{{ greeting }}, {{ name | capitalize }}.&amp;lt;/h1&amp;gt;
        &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;GreetMaster™: delivering you the finest of greetings.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Flask-Bootstrap&amp;rsquo;s base template provides access to all of Bootstrap&amp;rsquo;s gadgets, like the &lt;strong&gt;jumbotron&lt;/strong&gt;. If you pull back the curtain and take a look at 
&lt;a href=&#34;https://github.com/mbr/flask-bootstrap/blob/master/flask_bootstrap/templates/bootstrap/base.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the base template&lt;/a&gt;, you&amp;rsquo;ll see that Bootstrap&amp;rsquo;s files are sourced within the template blocks. After relaunching the server and visiting &lt;code&gt;localhost/fancy-greeting/fred&lt;/code&gt;, we will now be greeted with a much nicer page.&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-4b-our-greetmaster-greeting-spruced-up-with-bootstrap&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-02-templates/bootstrap-template.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 4.&amp;lt;/b&amp;gt; Our GreetMaster™ greeting, spruced up with Bootstrap.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-02-templates/bootstrap-template.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 4.&lt;/b&gt; Our GreetMaster™ greeting, spruced up with Bootstrap.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Alright, fine. It&amp;rsquo;s still pretty plain. But moving away from Times New Roman has to count for something! Take it as one small step towards a modern interface for our app, which we will build up to as we move through the series.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you&amp;rsquo;ve cloned the &lt;a href=&#34;https://github.com/ahadjinicolaou/issues.app&#34;&gt;project repository&lt;/a&gt;, you can run &lt;code&gt;git checkout ff8887e&lt;/code&gt; to get the current version of the source code.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;At this stage you might already appreciate the convenience that templates have to offer us. If not, then that&amp;rsquo;s entirely understandable. After all, we have been putting together some pretty simple pages up until now. Their convenience will be better appreciated once we start sinking our teeth into the prototype interface for the app, which I hope to cover in the next article.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Don&amp;rsquo;t take it from me. The developers say it 
&lt;a href=&#34;https://jinja.palletsprojects.com/en/2.11.x/templates/#template-inheritance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;right here&lt;/a&gt; in their documentation! &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>issues.app (1): Getting started with Flask and Pytest</title>
      <link>https://www.remotelycurious.net/post/issues-app-01-intro/</link>
      <pubDate>Sun, 30 Aug 2020 15:28:38 -0400</pubDate>
      <guid>https://www.remotelycurious.net/post/issues-app-01-intro/</guid>
      <description>&lt;p&gt;My biggest regret is not studying software design as an undergraduate.&lt;/p&gt;
&lt;p&gt;Although I&amp;rsquo;ve been writing code for more than a decade, most of the code behind my programs tends to be stuffed into one or two files. This is fine when the programs are small, but a few months ago I had to fix a bug in one of my more complicated apps, which allows a user to load an audio file and manually annotate speech through a graphical interface. Having forgotten entirely about how my app is structured, I had no choice but to trace through the 3300+ lines of code just to reorient myself, before making what turned out to be a simple change. I have since decided that investing time into becoming a good software engineer will pay massive dividends and do wonders for my future sanity.&lt;/p&gt;
&lt;p&gt;This is the start of what will become a series about web app development using Flask and Pytest. After some research, I singled out these frameworks because they are extensible, well-designed and don&amp;rsquo;t require loads of boilerplate code, which gets in the way of understanding. My main drive is to learn more about application architecture and test-driven development. Along the way I will distill what I learn into this guide, so that it can help other software engineering novices who have similar goals and working knowledge.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Speaking of knowledge, you should be comfortable with Python to get the most out of this guide. You should also be familiar with relational databases, client-server interactions, and the basics of web development (e.g., writing simple pages in HTTP/CSS/JavaScript).
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#codebase&#34;&gt;Codebase&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#project-structure&#34;&gt;Project structure&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#configuration&#34;&gt;Configuration&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#protecting-your-cookies&#34;&gt;Protecting your cookies&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#application&#34;&gt;Application&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#test-code&#34;&gt;Test code&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#execution&#34;&gt;Execution&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#virtual-environment&#34;&gt;Virtual environment&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#launching-the-app&#34;&gt;Launching the app&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#running-some-tests&#34;&gt;Running some tests&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#test-driven-development&#34;&gt;Test-driven development&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#handling-route-requests&#34;&gt;Handling route requests&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m not a coding novice but there are a lot of uncharted waters here. Throughout the writeup I&amp;rsquo;ll reference docpages from both 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flask&lt;/a&gt; and 
&lt;a href=&#34;https://docs.pytest.org/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pytest&lt;/a&gt; as they are well presented and unusually helpful for those getting started. Aside from the documentation and the odd forum post, my primary resources are these two excellent books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.amazon.com/Flask-Web-Development-Developing-Applications-dp-1491991739/dp/1491991739&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Flask Web Development&lt;/em&gt;&lt;/a&gt; by Miguel Grinberg,&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.amazon.com/Python-Testing-pytest-Effective-Scalable/dp/1680502409&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Python Testing with Pytest&lt;/em&gt;&lt;/a&gt; by Brian Okken.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s get this show started.&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;My target application is a fully operational 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Issue_tracking_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue tracker&lt;/a&gt; (see 
&lt;a href=&#34;https://www.youtube.com/watch?v=PQa3NFB_LRg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; for a slick tour through an established product). Sure, it&amp;rsquo;s not the most exciting idea, but getting an app like this up and running calls for a lot of design decisions. There&amp;rsquo;s also enough complexity to make test-driven development worth the effort. To get a feel for what we&amp;rsquo;re talking about, consider just two aspects of the final product:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a clean and functional &lt;strong&gt;user interface&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data storage&lt;/strong&gt; to keep track of users, issues, projects, and their relationships.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The implementation of each of these will heavily depend on how we want to use the issue tracker. We also want some way to &lt;strong&gt;authenticate&lt;/strong&gt; users and securely handle their passwords. Basic account management (e.g. validating new accounts, resetting passwords) will be handled by &lt;strong&gt;email&lt;/strong&gt;. Each of these aspects will be the topic of a separate writeup that builds on the codebase from the previous writeup.&lt;/p&gt;
&lt;h1 id=&#34;codebase&#34;&gt;Codebase&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s now time to introduce the initial codebase. The rest of this article goes over the details of how it works as well as the rationale behind its structure.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you&amp;rsquo;re looking for a good IDE, I highly recommend &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;. It&amp;rsquo;s free, widely supported by an extensive list of add-ons, and easy to work with. It is truly a thing of beauty.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;project-structure&#34;&gt;Project structure&lt;/h2&gt;
&lt;p&gt;Our starting codebase is held in the root directory &lt;code&gt;issues-project&lt;/code&gt; (Fig. 1). Inside we have the &lt;code&gt;src/main&lt;/code&gt; folder, containing three Python files that comprise our app&amp;rsquo;s source code. The &lt;code&gt;tests&lt;/code&gt; folder on the same level holds code that will be used to test the application. We also have &lt;code&gt;setup.py&lt;/code&gt;, which will be invoked to setup the virtual environment.&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-1b-directory-listing-for-issues-project&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-01-intro/filetree.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 1.&amp;lt;/b&amp;gt; Directory listing for &amp;lt;code&amp;gt;issues-project&amp;lt;/code&amp;gt;.&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-01-intro/filetree.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 1.&lt;/b&gt; Directory listing for &lt;code&gt;issues-project&lt;/code&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;There are of course many ways to structure a project. This particular layout allows us to play nice with Pytest and build on the codebase without too much difficulty, but there are other advantages that you can read about in 
&lt;a href=&#34;https://blog.ionelmc.ro/2014/05/25/python-packaging&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this comprehensive post&lt;/a&gt;. As the application grows I will likely bundle unit tests and functional tests into separate folders, but for now this structure will do just fine.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Most large applications need some 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/config/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;configuration&lt;/a&gt;. Each instance of a Flask application comes with a &lt;code&gt;config&lt;/code&gt; attribute that can be modified as if it were a dictionary:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;app = Flask(__name__)
app.config[&#39;TESTING&#39;] = True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few &lt;code&gt;config&lt;/code&gt; values that we use are listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;, used to encrypt session cookies (discussed later),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEBUG&lt;/code&gt;, toggles debug mode, which shows an interactive debugger for unhandled exceptions and reloads the development server for code changes,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TESTING&lt;/code&gt;, toggles testing mode, which tells the app to allow exceptions to propagate, such that they can be handled by a testing framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The configuration file is shown below. We have three different configuration structures: one for development, another for testing, and yet another for production. This is useful because often a developer will want to use separate resources for each of these activities. You probably don&amp;rsquo;t want to test CRUD operations on your production database!&lt;/p&gt;
&lt;p&gt;Each configuration inherits from the base &lt;code&gt;Config&lt;/code&gt; class, which contains settings that are shared across all configuration types. The secret key is assumed to be stored as an environment variable.&lt;/p&gt;
&lt;h4 id=&#34;srcmainconfigpy&#34;&gt;src/main/config.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os

class Config:
    SECRET_KEY = os.environ.get(&#39;SECRET_KEY&#39;)

class DevelopmentConfig(Config):
    DEBUG = True

class TestingConfig(Config):
    TESTING = True

class ProductionConfig(Config):
    PLACEHOLDER = True

config = {
    &#39;development&#39;: DevelopmentConfig,
    &#39;testing&#39;: TestingConfig,
    &#39;production&#39;: ProductionConfig,
    &#39;default&#39;: DevelopmentConfig
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now use the global &lt;code&gt;config&lt;/code&gt; dictionary to easily configure an instance of our application to suit our purpose, whether it be for testing or development:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;app = Flask(__name__)
app.config.from_object(config[&#39;testing&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;protecting-your-cookies&#34;&gt;Protecting your cookies&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s worth talking a bit more about that secret key and how it affects the 
&lt;a href=&#34;https://machinesaredigging.com/2013/10/29/how-does-a-web-session-work/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;user session&lt;/em&gt;&lt;/a&gt;. Most web applications need to maintain some kind of &lt;em&gt;state&lt;/em&gt; with each user without having to dive into (slower) persistent storage. While handling an HTTP request, Flask makes the user session available to the application using the 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/api/#flask.session&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;session&lt;/code&gt;&lt;/a&gt; object. This allows the application to keep track of information across multiple requests using key-value pairs called &lt;em&gt;cookies&lt;/em&gt;. We will see how these can be useful later when we start to use them.&lt;/p&gt;
&lt;p&gt;For now, just know that Flask will not allow you to use user sessions without defining the secret key. This key should be a long string of text that is not easily guessable and sufficiently random. Flask will use this key to cryptographically sign each cookie, such that a bad actor cannot impersonate you (or the application server) by forging your signature.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Do not store secrets in cookies. Although your signature cannot be (easily) forged, the cookie payload can be &lt;a href=&#34;https://blog.miguelgrinberg.com/post/how-secure-is-the-flask-user-session&#34;&gt;very easily decrypted&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Make sure that your secrets (including things like API keys) are securely stored outside of source code. Never commit your secrets to version control!
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;application&#34;&gt;Application&lt;/h2&gt;
&lt;p&gt;Here we have our application code. If you&amp;rsquo;re looking at this code and thinking there&amp;rsquo;s something missing, well&amp;hellip; alright. It&amp;rsquo;s quite spartan. What we &lt;em&gt;do&lt;/em&gt; have in our package constructor (&lt;code&gt;__init__.py&lt;/code&gt;) is a 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/patterns/appfactories/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;factory function&lt;/em&gt;&lt;/a&gt;. We can use &lt;code&gt;create_app()&lt;/code&gt; to create multiple instances of our app and import different configuration sets for each one using &lt;code&gt;app.config.from_object()&lt;/code&gt;. This is great for unit testing, as you will soon see.&lt;/p&gt;
&lt;h4 id=&#34;srcmain__init__py&#34;&gt;src/main/__init__.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Flask
from src.main.config import config

def create_app(config_name):
    app = Flask(__name__)
    app.config.from_object(config[config_name])
    return app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;issues.py&lt;/code&gt; file is used to instantiate the application. It first looks for the &lt;code&gt;ISSUES_CONFIG&lt;/code&gt; environment variable to see which configuration to use, but if that fails, the application is configured with the default (development) settings.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;create_app()&lt;/code&gt; function has significance to Flask&amp;rsquo;s command line utility, which we will use to launch the app. We will discuss this shortly.&lt;/p&gt;
&lt;h4 id=&#34;srcmainissuespy&#34;&gt;src/main/issues.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
from . import create_app

app = create_app(os.getenv(&#39;ISSUES_CONFIG&#39;) or &#39;default&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there we have it. That&amp;rsquo;s the app. Take a moment to appreciate just how lean it is. It won&amp;rsquo;t always be this way!&lt;/p&gt;
&lt;h2 id=&#34;test-code&#34;&gt;Test code&lt;/h2&gt;
&lt;p&gt;We now turn our attention to Pytest and what it will do for us. Taking a look at &lt;code&gt;test_suite.py&lt;/code&gt;, we find a rag-tag collection of unit tests. The first test is not particularly useful, but Pytest doesn&amp;rsquo;t care. All it cares about is whether the logic after any &lt;code&gt;assert&lt;/code&gt; keyword evaluates to &lt;code&gt;True&lt;/code&gt;. If it doesn&amp;rsquo;t, any remaining code in that function is skipped, the function is failed, and Pytest moves on to the next function. If all assertions in the test function are true, the function is passed.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you have used other testing frameworks you will appreciate that this is an incredibly beautiful programming construct. You don&amp;rsquo;t need to use things like &lt;code&gt;assertLess(a, b)&lt;/code&gt;: just write &lt;code&gt;assert a &amp;lt; b&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;teststest_suitepy&#34;&gt;tests/test_suite.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def test_sanity():
    assert 1 + 1 == 2

def test_config(app):
    assert app.config[&#39;TESTING&#39;]

def test_response(client):
    response = client.get(&#39;/&#39;)
    assert response.status_code == 200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The remaining two test functions have arguments that sound more relevant. Where do &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;client&lt;/code&gt; come from? That brings us to our next file.&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;conftest.py&lt;/code&gt; file, Pytest expects to find 
&lt;a href=&#34;https://docs.pytest.org/en/latest/fixture.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;fixtures&lt;/em&gt;&lt;/a&gt;. These are functions that can be used to prepare &lt;em&gt;something&lt;/em&gt; (data, initialization, teardown, etc.) for a test function. In the code below, the &lt;code&gt;pytest.fixture&lt;/code&gt; decorator is used to tell Pytest that the function &lt;code&gt;app()&lt;/code&gt; is a fixture. Now Pytest knows to run the function whenever it encounters &lt;code&gt;app&lt;/code&gt; in the argument list of a test function. The &lt;code&gt;test_config()&lt;/code&gt; function in our test suite, for example, gets a fresh instance of our application that has been configured for testing.&lt;/p&gt;
&lt;h4 id=&#34;testsconftestpy&#34;&gt;tests/conftest.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from src.main import create_app
import pytest

@pytest.fixture
def app():
    # initializes the app with the testing config
    app = create_app(&#39;testing&#39;)
    return app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that there is another fixture called &lt;code&gt;client&lt;/code&gt; that hasn&amp;rsquo;t been defined. This fixture is automatically made available to us courtesy of the &lt;code&gt;pyflask-test&lt;/code&gt; package (installed in our upcoming virtual environment), which looks for an &lt;code&gt;app&lt;/code&gt; fixture and uses it to create a test client. We will use the test client to generate browser requests and see whether we are getting back an expected response from our application.&lt;/p&gt;
&lt;h1 id=&#34;execution&#34;&gt;Execution&lt;/h1&gt;
&lt;p&gt;Now that we have introduced the codebase, it&amp;rsquo;s time to fire it up. We will run &lt;code&gt;issues&lt;/code&gt; within a virtual environment that is managed by 
&lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Miniconda&lt;/a&gt;, a lightweight version of the Anaconda package management system.&lt;/p&gt;
&lt;h2 id=&#34;virtual-environment&#34;&gt;Virtual environment&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll go ahead and use Miniconda to create our Python 3.7 environment. Once it&amp;rsquo;s ready, activate and use &lt;code&gt;pip&lt;/code&gt; to install our requisite packages. Don&amp;rsquo;t forget that trailing period.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ROOTDIR&amp;gt; conda create -n issues python=3.7
ROOTDIR&amp;gt; conda activate issues
(issues) ROOTDIR&amp;gt; pip install -e .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When invoked by the command above, pip will search the current directory for the &lt;code&gt;setup.py&lt;/code&gt; file, which includes a list of dependencies needed for &lt;code&gt;issues&lt;/code&gt; to run properly. Each package listed in &lt;code&gt;install_requires&lt;/code&gt; will be installed into the virtual environment.&lt;/p&gt;
&lt;h4 id=&#34;setuppy&#34;&gt;setup.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from setuptools import setup, find_packages

setup(
    name=&#39;issues&#39;,
    version=&#39;0.1&#39;,
    packages=find_packages(),
    install_requires=[&amp;quot;flask&amp;quot;, &amp;quot;pytest&amp;quot;, &amp;quot;pytest-flask&amp;quot;],
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What about that &lt;code&gt;-e&lt;/code&gt;? Running &lt;code&gt;pip install&lt;/code&gt; with the &lt;em&gt;editable&lt;/em&gt; option installs a link within the virtual environment to each local package discovered by 
&lt;a href=&#34;https://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;find_packages()&lt;/code&gt;&lt;/a&gt; (i.e., &lt;code&gt;main&lt;/code&gt;). One of the major benefits of installing our project packages in this way is that our test files can now import them without resorting to hacky system path workarounds. Even better, the editable option means that we can continue to change the source code without having to reinstall the packages.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    At first glance importing a package from a neighboring directory doesn&amp;rsquo;t seem to be such a big problem, but take a look at the age of &lt;a href=&#34;https://stackoverflow.com/questions/6323860/sibling-package-imports&#34;&gt;this Stack Overflow post&lt;/a&gt;. People have been dealing with this issue for a very long time&amp;hellip;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;environment-variables&#34;&gt;Environment variables&lt;/h2&gt;
&lt;p&gt;Remember that we need to set up a couple of environment variables. The syntax used to do this will vary depending on your shell (see 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/tutorial/factory/#run-the-application&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this link&lt;/a&gt; for some examples). I&amp;rsquo;m using Visual Studio Code on Windows, whose terminal uses PowerShell. Note that your secret key should be more complex than this random headline I took from the New York Times.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$env:FLASK_APP=&#39;src/main/issues.py&#39;
$env:ISSUES_CONFIG=&#39;development&#39;
$env:SECRET_KEY=&#39;Are you overpraising your child?&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;rsquo;s a variable here that has not yet been introduced to us. As you might suspect, &lt;code&gt;FLASK_APP&lt;/code&gt; holds the location of our app. We&amp;rsquo;ll see how Flask uses this variable in the next section.&lt;/p&gt;
&lt;h2 id=&#34;launching-the-app&#34;&gt;Launching the app&lt;/h2&gt;
&lt;p&gt;Once installed inside the virtual environment, Flask gives us access to 
&lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/cli/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;flask&lt;/code&gt;&lt;/a&gt;, a command line utility. Entering &lt;code&gt;flask run&lt;/code&gt; will first query the &lt;code&gt;FLASK_APP&lt;/code&gt; variable to discover our application. Since we have specified a path to a Python file, Flask will look for the &lt;code&gt;create_app()&lt;/code&gt; factory function in this file and use it to instantiate the application. Flask will then start up a development server and host the app on &lt;code&gt;http://localhost:5000/&lt;/code&gt;. You can find other ways to configure &lt;code&gt;FLASK_APP&lt;/code&gt; 
&lt;a href=&#34;https://www.twilio.com/blog/how-run-flask-application&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in this writeup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you visit the server right now, you will be greeted with a &lt;strong&gt;404 Not Found&lt;/strong&gt; error. That&amp;rsquo;s expected, since we haven&amp;rsquo;t yet told Flask how to handle any request. We&amp;rsquo;ll get to that shortly but for now let&amp;rsquo;s kill the server and see how to run our test suite.&lt;/p&gt;
&lt;h2 id=&#34;running-some-tests&#34;&gt;Running some tests&lt;/h2&gt;
&lt;p&gt;We are going to invoke Pytest through &lt;code&gt;pytest-flask&lt;/code&gt;, which gives us access to the test client, as described earlier. We can run the test suite with this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(issues) ROOTDIR&amp;gt; py.test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pytest will now go off and search through any test code (i.e. files that look like &lt;code&gt;test_*.py&lt;/code&gt; or &lt;code&gt;*_test.py&lt;/code&gt;) within your current directory and all subdirectories. Test functions should start with &amp;ldquo;test&amp;rdquo;, like &lt;code&gt;test_response()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;py.test&lt;/code&gt; results in a big chunk of text that starts with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;============================= test session starts =============================
platform win32 -- Python 3.7.7, pytest-6.0.1, py-1.9.0, pluggy-0.13.1
plugins: flask-1.0.0
collected 3 items

tests\test_suite.py ..F   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last line tells the story: Pytest found three tests in &lt;code&gt;test_suite.py&lt;/code&gt;, of which two tests passed (indicated with a &lt;code&gt;.&lt;/code&gt;) and one test failed (&lt;code&gt;F&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;At the end of the test output, we see the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;=========================== short test summary info ===========================
FAILED tests/test_suite.py::test_response - AssertionError: assert 404 == 200
========================= 1 failed, 2 passed in 0.08s =========================
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like &lt;code&gt;test_response()&lt;/code&gt; failed. Let&amp;rsquo;s take another look at the function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def test_response(client):
    response = client.get(&#39;/&#39;)
    assert response.status_code == 200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pytest is telling us that after our test client made a GET request for the server&amp;rsquo;s root URL, the server did not return with a successful (&lt;strong&gt;200 OK&lt;/strong&gt;) response. We were expecting this since the server gave our browser a &lt;strong&gt;404 Not Found&lt;/strong&gt; response earlier. Since the returned status code was not equal to 200, the assertion failed and caused our test function to fail.&lt;/p&gt;
&lt;h1 id=&#34;test-driven-development&#34;&gt;Test-driven development&lt;/h1&gt;
&lt;p&gt;We have now set ourselves up to do some 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;test-driven development&lt;/em&gt;&lt;/a&gt;. Under this methodology, each new feature in our application begins life as a test. The goal is then to implement the feature by writing as little code as possible so as to pass the test. This extremely short development cycle of writing and passing tests is repeated many times until you have yourself an application.&lt;/p&gt;
&lt;p&gt;Our first &amp;ldquo;feature&amp;rdquo; is very simple: deliver a successful response to the client that requests the root URL.&lt;/p&gt;
&lt;h2 id=&#34;handling-route-requests&#34;&gt;Handling route requests&lt;/h2&gt;
&lt;p&gt;While the web server is running, it passes all received requests to &lt;code&gt;app&lt;/code&gt;, the Flask application instance. The app needs to know how to respond to each requested URL. More specifically, Flask needs to know what function to use to create the response. This is achieved using &lt;em&gt;routes&lt;/em&gt;, which associate a URL with a response function. We can use the &lt;code&gt;app.route&lt;/code&gt; decorator to specify a route for the root URL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/&#39;)
def index():
    return &#39;&amp;lt;h1&amp;gt;Show me the money!&amp;lt;/h1&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this way, the &lt;code&gt;index()&lt;/code&gt; function has now been assigned to handle the response for the root URL. We will add this code to the &lt;code&gt;create_app()&lt;/code&gt; function within the &lt;code&gt;issues&lt;/code&gt; package constructor:&lt;/p&gt;
&lt;h4 id=&#34;srcmain__init__py-1&#34;&gt;src/main/__init__.py&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Flask
from src.main.config import config

def create_app(config_name):
    app = Flask(__name__)
    app.config.from_object(config[config_name])

    @app.route(&#39;/&#39;)
    def index():
       return &#39;&amp;lt;h1&amp;gt;Show me the money!&amp;lt;/h1&amp;gt;&#39;

    return app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After revising the code and launching the app with &lt;code&gt;flask run&lt;/code&gt;, you will find that a trip to the server root no longer results in a 404 Not Found.&lt;/p&gt;















&lt;figure id=&#34;figure-bfig-2b-success&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.remotelycurious.net/issues-app-01-intro/200-OK.png&#34; data-caption=&#34;&amp;lt;b&amp;gt;Fig. 2.&amp;lt;/b&amp;gt; Success!&#34;&gt;


  &lt;img src=&#34;https://www.remotelycurious.net/issues-app-01-intro/200-OK.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;b&gt;Fig. 2.&lt;/b&gt; Success!
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Let&amp;rsquo;s run pytest once more.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(issues) ROOTDIR&amp;gt; py.test
============================= test session starts =============================
platform win32 -- Python 3.7.7, pytest-6.0.1, py-1.9.0, pluggy-0.13.1
plugins: flask-1.0.0
collected 3 items

tests\test_suite.py ...                                                  [100%]

============================== 3 passed in 0.06s ==============================
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, we have passed the tests and restored order to the universe.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you&amp;rsquo;ve cloned the &lt;a href=&#34;https://github.com/ahadjinicolaou/issues.app&#34;&gt;project repository&lt;/a&gt;, you can run &lt;code&gt;git checkout fe2b7ce&lt;/code&gt; to get the current version of the source code.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;That concludes the initialization of the issue tracker project. Although it takes a bit more work to distribute a Flask application over several source files, this modular design should allow for a more streamlined development and testing experience.&lt;/p&gt;
&lt;p&gt;There is a lot of code between what we have and a working issue tracker. In the next article I&amp;rsquo;ll create a basic user interface for the app and motivate the use of &lt;em&gt;templates&lt;/em&gt;, which allow for the clean separation of presentation logic and application data.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
